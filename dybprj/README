= Overview dybprj =

'''dybprj''' is an umbrella/skeleton django project destined for source:dybgaudi/trunk/Utilities/DybPrj
    * via AuthUserFileBackend provides extrapolated Trac/SVN Users
    * where to put ? project OR app ? in general minimise whats in the project 



== IMPLEMENTATION APPROACHES ==

  * Use django Permissions ... model (not instance) based 
     * means cannot have a Table model ... 
     * requires dynamic introspection (i did this before)
     * django does not support compound PK using in DBI tables (SEQNO,ROW_COUNTER)
        * when just using django models to hold permissions ... probably not a problem  

     * FORCES HOOP JUMPING FOR DYNAMIC SYNCDB 


  * Role-own per-instance permissions ... aping unix  

  * adopt django add on that provides object permissions 

      * django-authority (the way to go pre django 1.2)
         * http://packages.python.org/django-authority/create_per_object_permission.html
         * http://groups.google.com/group/django-authority/browse_thread/thread/59ef512046ad41b3
      * BUT django 1.2 adds new possibilities
         * http://djangoadvent.com/1.2/object-permissions/ 
            * nice API
         * http://packages.python.org/django-guardian/
            * http://packages.python.org/django-guardian/assign.html

         * http://packages.python.org/django-permissions
            * put off by ugly documentation, and "role" usag ... non-agnostic seemingly 



    
== ugo (user-group-other) app ==

    * generic thinking : 
       * control actions on resources (such as Databases, Tables ) 
       * aping unix permissions ? user-group-other

    * in particular ...
        * provide high level control of offline_db Table permissions
           * ie respond to logged changes to a high level model (ie User added to Group with write permission for Table )  
             issue the needed GRANTS/REVOKES to the offline_db
        * user profiles 
           * view group memberships and permissions of User 
 

   NEXT STEPS ...
       * how to capture permission groups for DBI table pair  updating 
       * introspect current MySQL GRANTS ?
       * propagate Dbi table names in DBCONFed DB into Django Groups ?
       * apply generated sql to DB pointed to by DBCONF via MySQLdb ?

=== model ===
  
     high level model comprising 

         User, Group       ... django standard     
         Permissions       ... probably need instance specific ... so cannot go-django         

         Log ... is there some standard django way to DB log things 


         Resource ............ 

             Database
                - name  
                - tables
             Table
                - name
                - writers ... User 
                - related-tables


=== Open questions ... ===

  * DBI specific or just treat *Vld and DbiLogEntry as other related tables  ?
  * use django 1.2 multi-db support for access to tables in offline_db ? or do at mysql-python level ?
  * can django used multi-db without models ? just a way to get to the cursor ?



