import os
from ROOT import TDataMember
TDataMember.__repr__ = lambda dm:repr((dm.GetName(),dm.GetTitle(),dm.GetTypeName(),dm.GetTrueTypeName(),dm.GetArrayDim(),dm.GetArrayIndex(),dm.GetMaxIndex(0)))


class DjRoot(list):
    """
        Generate the django model definition corresponding to a TObject 
        to eliminate tedious repetition, however fixups may be needed 

           1) assign one field as primary_key if appropriate
           2) replace free integers with enum choices where appropriate
           3) more complex classes that do not simply map into django ORM / database tables 
              will need manual construction of shadowing classes

    """
    def __init__(self, kls):
        self.kls = kls
        self.append("# generated by %s " % os.path.abspath(__file__) )
        self.append("from django.db import models")
        self.append("class %s(models.Model):" % kls.GetName() )
        dms = kls.GetListOfAllPublicDataMembers()
        for dm in dms:
            if self.select(dm):
                self.add(dm)

    def select(self, dm):return dm.GetName()[0] == 'f'
    def name(self, dm):return dm.GetName()[1:]
    def fspc(self, dm):
        spc = { 'name':self.name(dm), 'help_text':dm.GetTitle(), 'ftyp':"?" , 'dm':repr(dm), 'comm':"#" }
        ttn,dim,max = dm.GetTrueTypeName(), dm.GetArrayDim(), dm.GetMaxIndex(0)  
        if ttn == "char" and dim == 1:
            spc.update( {'ftyp':'CharField' , 'max_length':max , 'comm':"" } )           
        elif dim == 0 and max == -1:
            if ttn == "unsigned int":spc.update( {'ftyp':'PositiveIntegerField' , 'comm':"" } )
            elif ttn == "float":spc.update( {'ftyp':'FloatField', 'comm':"" } )
        if spc['name'].endswith('Time'):spc['ftyp'] = "DateTimeField" 
        return spc

    def add( self , dm ):
        spc = self.fspc(dm)  
        dct = { 'comm':spc.pop('comm'), 'name':spc.pop('name'), 'ftyp':spc.pop('ftyp') , 'dm':repr(spc.pop('dm')), 'fkwa':repr(spc) }
        if dct['comm'] == "":dct['dm'] = ""
        self.append("    %(comm)s%(name)s = models.%(ftyp)s(**%(fkwa)s) # %(dm)s " %  dct ) 

    def __repr__(self):
        return "\n".join(self)

    def dump(self):
        print "\n".join([repr(dm) for dm in dms if dm.GetName()[0] == 'f'])
        

if __name__=='__main__':

    import ROOT
    ROOT.gSystem.Load("$ABERDEEN_HOME/DataModel/lib/libAbtDataModel.%s" % ROOT.gSystem.GetSoExt())
    import sys

    if len(sys.argv) > 1:
    	kln = sys.argv[1]
    else:
        print "Usage: djroot.py classname , eg AbtRunInfo " 
        sys.exit(1)

    mdl = getattr( ROOT, kln )
    kls = mdl.Class()
    djr = DjRoot(kls)
    print djr
    





