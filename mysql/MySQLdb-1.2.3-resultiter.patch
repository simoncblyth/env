Index: _mysql.c
===================================================================
--- _mysql.c	(revision 650)
+++ _mysql.c	(working copy)
@@ -39,6 +39,60 @@
 #include "mysqld_error.h"
 #include "errmsg.h"
 
+#include <numpy/arrayobject.h>
+
+/*
+   http://dev.mysql.com/doc/refman/5.5/en/c-api-data-structures.html
+   http://dev.mysql.com/doc/refman/5.5/en/numeric-types.html
+   http://docs.scipy.org/doc/numpy/reference/c-api.dtype.html
+*/
+
+int mysql2npy( long type ){
+   int npt = -1 ; 
+   switch( type ){
+
+       case MYSQL_TYPE_TINY: 
+       case MYSQL_TYPE_SHORT: 
+          npt = NPY_SHORT ; 
+          break ; 
+       case MYSQL_TYPE_ENUM: 
+       case MYSQL_TYPE_SET: 
+       case MYSQL_TYPE_INT24: 
+       case MYSQL_TYPE_LONG: 
+          npt = NPY_INT ; 
+          break ; 
+       case MYSQL_TYPE_LONGLONG: 
+          npt = NPY_LONGLONG ; 
+          break ; 
+
+       case MYSQL_TYPE_DECIMAL: 
+       case MYSQL_TYPE_DOUBLE: 
+          npt = NPY_DOUBLE ; 
+          break ; 
+       case MYSQL_TYPE_FLOAT: 
+          npt = NPY_FLOAT ; 
+          break ; 
+          
+       case MYSQL_TYPE_DATE: 
+       case MYSQL_TYPE_TIME: 
+       case MYSQL_TYPE_DATETIME: 
+       case MYSQL_TYPE_YEAR: 
+       case MYSQL_TYPE_NEWDATE: 
+       case MYSQL_TYPE_TIMESTAMP: 
+          npt = NPY_DATETIME ; 
+          break ; 
+ 
+       case MYSQL_TYPE_VAR_STRING:
+       case MYSQL_TYPE_STRING:
+          npt = NPY_STRING ; 
+          break ; 
+
+   }
+   return npt ;
+}
+
+
+
 #if PY_VERSION_HEX < 0x02020000
 # define MyTuple_Resize(t,n,d) _PyTuple_Resize(t, n, d)
 # define MyMember(a,b,c,d,e) {a,b,c,d}
@@ -388,6 +442,7 @@
 	}
 	n = mysql_num_fields(result);
 	self->nfields = n;
+
 	if (!(self->converter = PyTuple_New(n))) return -1;
 	fields = mysql_fetch_fields(result);
 	for (i=0; i<n; i++) {
@@ -1191,7 +1246,57 @@
 	Py_XDECREF(d);
 	return NULL;
 }
+
+
+
+
+static char _mysql_ResultObject_npdescr__doc__[] =
+"Returns the sequence of 7-tuples required by the DB-API for\n\
+the Cursor.description attribute.\n\
+";
+
+static PyObject *
+_mysql_ResultObject_npdescr(
+	_mysql_ResultObject *self,
+	PyObject *args)
+{
+	PyObject* descr;
+	MYSQL_FIELD *fields;
 	
+        unsigned int i, n;
+        long type, length ;
+        char npy_code[10];
+
+	check_result_connection(self);
+	n = mysql_num_fields(self->result);
+	fields = mysql_fetch_fields(self->result);
+	
+        if (!(descr = PyList_New(n))) return NULL;
+	for (i=0; i<n; i++) {
+                type   =  (long) fields[i].type ;
+                length =  (long) fields[i].length ;
+
+                int tn =  mysql2npy( type ) ;
+                int is_flexible =  PyTypeNum_ISFLEXIBLE(tn);
+                PyArray_Descr* field_dt = is_flexible  ? PyArray_DescrNewFromType(tn) : PyArray_DescrFromType(tn);
+                if( is_flexible ) field_dt->elsize = length ;
+                sprintf( npy_code, "%c%d", field_dt->type , field_dt->elsize );
+
+		PyObject *it;
+		it = Py_BuildValue("(s,s)", fields[i].name, npy_code );
+
+		if (!it) goto error;
+		PyList_SET_ITEM(descr, i, it );
+	}
+	return descr ;
+  error:
+	Py_XDECREF(descr);
+	return NULL;
+}
+
+
+
+	
 static char _mysql_ResultObject_field_flags__doc__[] =
 "Returns a tuple of field flags, one for each column in the result.\n\
 " ;
@@ -1456,6 +1561,178 @@
 	return NULL;
 }
 
+
+static char _mysql_ResultObject_futurefetch_row__doc__[] =
+"futurefetchrow()\n\
+  Fetches one row as a tuple of strings.\n\
+  NULL is returned as None.\n\
+  A single None indicates the end of the result set.\n\
+";
+
+static PyObject *
+_mysql_ResultObject_futurefetch_row(
+	_mysql_ResultObject *self,
+ 	PyObject *unused)
+ {
+	unsigned int n, i;
+	unsigned long *length;
+	PyObject *r=NULL;
+	MYSQL_ROW row;
+	
+ 	check_result_connection(self);
+ 	
+	if (!self->use)
+		row = mysql_fetch_row(self->result);
+	else {
+ 		Py_BEGIN_ALLOW_THREADS;
+		row = mysql_fetch_row(self->result);
+ 		Py_END_ALLOW_THREADS;
+	}
+	if (!row && mysql_errno(&(((_mysql_ConnectionObject *)(self->conn))->connection))) {
+		_mysql_Exception((_mysql_ConnectionObject *)self->conn);
+		goto error;
+	}
+	if (!row) {
+		Py_INCREF(Py_None);
+		return Py_None;
+	}
+	
+	//n = mysql_num_fields(self->result);
+        n = self->nfields ; 
+	if (!(r = PyTuple_New(n))) return NULL;
+	length = mysql_fetch_lengths(self->result);
+	for (i=0; i<n; i++) {
+		PyObject *v;
+		if (row[i]) {
+			v = PyString_FromStringAndSize(row[i], length[i]);
+			if (!v) goto error;
+		} else /* NULL */ {
+			v = Py_None;
+			Py_INCREF(v);
+ 		}
+		PyTuple_SET_ITEM(r, i, v);
+ 	}
+	return r;
+  error:
+	Py_XDECREF(r);
+	return NULL;
+}
+
+
+
+static char _mysql_ResultObject_fetch_nparray__doc__[] =
+"futurefetchrow()\n\
+  Fetches one row as a tuple of strings.\n\
+  NULL is returned as None.\n\
+  A single None indicates the end of the result set.\n\
+";
+
+
+static PyObject *
+_mysql_ResultObject_fetch_nparray(
+	_mysql_ResultObject *self,
+ 	PyObject *unused)
+ {
+	unsigned int n, i ;
+	unsigned long *length ;
+        my_ulonglong e ;
+
+	PyObject* r = NULL;
+	PyObject* array = NULL;
+
+	MYSQL_ROW row;
+        int dims[] = { -1 };
+	
+ 	check_result_connection(self);
+    
+
+        // descr describes the structure of each element, not the shape
+        PyObject* d = _mysql_ResultObject_npdescr( self , NULL ) ;
+        PyArray_Descr *descr;
+        PyArray_DescrConverter( d , &descr);
+        Py_DECREF( d );
+        //PyObject_Print( d , stdout, 0);
+        //PyObject_Print( descr , stdout, 0);
+
+        //_mysql_ConnectionObject* conn = result_connection(self) ;
+        //unsigned long long nele = mysql_affected_rows(&(conn->connection)) ;
+        
+        my_ulonglong nele = mysql_num_rows(self->result);
+
+        // hmm need to know the count in order to create the structured array          
+        dims[0] = nele ; 
+        array = PyArray_SimpleNewFromDescr( 1, dims, descr);
+        
+        n = self->nfields ; 
+
+        for( e=0; e<nele ; e++ ){  
+
+  	    row = mysql_fetch_row(self->result);
+	    if (!row && mysql_errno(&(((_mysql_ConnectionObject *)(self->conn))->connection))) {
+	   	    _mysql_Exception((_mysql_ConnectionObject *)self->conn);
+		    goto error;
+	    }
+	    if (!row) {
+	   	    Py_INCREF(Py_None);
+		    return Py_None;
+	    }
+	
+	    length = mysql_fetch_lengths(self->result);
+	    
+            if (!( r = PyTuple_New(n) )) return NULL;
+	    for (i=0; i<n; i++) {
+	  	PyObject *v;
+		if (row[i]) {
+			v = PyString_FromStringAndSize(row[i], length[i]);
+			if (!v) goto error;
+		} else {
+			v = Py_None;
+			Py_INCREF(v);
+ 		}
+		PyTuple_SET_ITEM(r, i, v);
+ 	    }
+            
+            void* ptr = PyArray_GETPTR1(array, (npy_intp)e ) ;
+            PyArray_SETITEM(array, ptr, r );
+        }
+	return array ;
+  error:
+	Py_XDECREF(array);
+	return NULL;
+}
+
+
+
+
+
+
+
+static PyObject *
+_mysql_ResultObject__iter__(
+	_mysql_ResultObject *self,
+	PyObject *unused)
+{
+	check_result_connection(self);
+	Py_INCREF(self);
+	return (PyObject *)self;
+}
+
+static PyObject *
+_mysql_ResultObject_next(
+	_mysql_ResultObject *self,
+	PyObject *unused)
+{
+	PyObject *row;
+	check_result_connection(self);
+	row = _mysql_ResultObject_futurefetch_row(self, NULL);
+	if (row == Py_None) {
+		Py_DECREF(row);
+		PyErr_SetString(PyExc_StopIteration, "");
+		return NULL;
+	}
+	return row;
+}
+
 #if MYSQL_VERSION_ID >= 32303
 
 static char _mysql_ConnectionObject_change_user__doc__[] =
@@ -2392,12 +2669,30 @@
 		_mysql_ResultObject_describe__doc__
 	},
 	{
+		"npdescr",
+		(PyCFunction)_mysql_ResultObject_npdescr,
+		METH_VARARGS,
+		_mysql_ResultObject_npdescr__doc__
+	},
+	{
 		"fetch_row",
 		(PyCFunction)_mysql_ResultObject_fetch_row,
 		METH_VARARGS | METH_KEYWORDS,
 		_mysql_ResultObject_fetch_row__doc__
 	},
 	{
+		"fetch_nparray",
+		(PyCFunction)_mysql_ResultObject_fetch_nparray,
+		METH_VARARGS | METH_KEYWORDS,
+		_mysql_ResultObject_fetch_nparray__doc__
+	},
+	{
+		"futurefetch_row",
+		(PyCFunction)_mysql_ResultObject_futurefetch_row,
+		METH_VARARGS | METH_KEYWORDS,
+		_mysql_ResultObject_futurefetch_row__doc__
+	},
+	{
 		"field_flags",
 		(PyCFunction)_mysql_ResultObject_field_flags,
 		METH_VARARGS,
@@ -2678,9 +2973,9 @@
 #if PY_VERSION_HEX >= 0x02020000
 	/* Added in release 2.2 */
 	/* Iterators */
-	0, /* (getiterfunc) tp_iter */
-	0, /* (iternextfunc) tp_iternext */
-	
+	(getiterfunc) _mysql_ResultObject__iter__, /* (getiterfunc) tp_iter */
+	(iternextfunc) _mysql_ResultObject_next, /* (iternextfunc) tp_iternext */
+		
 	/* Attribute descriptor and subclassing stuff */
 	(struct PyMethodDef *) _mysql_ResultObject_methods, /* tp_methods */
 	(MyMemberlist(*)) _mysql_ResultObject_memberlist, /*tp_members */
@@ -2880,6 +3175,9 @@
 	if (!(_mysql_NULL = PyString_FromString("NULL")))
 		goto error;
 	if (PyDict_SetItemString(dict, "NULL", _mysql_NULL)) goto error;
+
+        import_array();
+
   error:
 	if (PyErr_Occurred())
 		PyErr_SetString(PyExc_ImportError,
Index: test.py
===================================================================
--- test.py	(revision 0)
+++ test.py	(revision 0)
@@ -0,0 +1,9 @@
+import _mysql
+
+if __name__ == '__main__':
+    conn = _mysql.connect(  read_default_file="~/.my.cnf", read_default_group="client" ) 
+    conn.query("select * from CalibPmtSpecVld limit 10")
+    r = conn.store_result()
+    a = r.fetch_nparray()
+    print repr(a)
+
Index: setup_posix.py
===================================================================
--- setup_posix.py	(revision 650)
+++ setup_posix.py	(working copy)
@@ -3,6 +3,12 @@
 # This dequote() business is required for some older versions
 # of mysql_config
 
+try:
+    import numpy as np
+except ImportError:
+    np = None 
+
+
 def dequote(s):
     if s[0] in "\"'" and s[0] == s[-1]:
         s = s[1:-1]
@@ -70,6 +76,10 @@
                          for i in mysql_config('cflags')
                          if i.startswith(compiler_flag('I')) ]
 
+
+    if np:
+         include_dirs += [ np.get_include() ]
+
     if static:
         extra_objects.append(os.path.join(
             library_dirs[0],'lib%s.a' % client))
Index: Makefile
===================================================================
--- Makefile	(revision 0)
+++ Makefile	(revision 0)
@@ -0,0 +1,15 @@
+
+PYTHON := $(shell which python)
+
+
+i :
+	python setup.py build_ext -i
+t :
+	python test.py 
+g :
+	@echo enter \"set args test.py\" then \"r\"
+	gdb $(PYTHON) 
+
+
+.PHONY : i t g
+
