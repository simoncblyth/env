.. include:: my_s5defs.txt


:i:`Opticks : GPU Optical Photon Simulation for Particle Physics with NVIDIA OptiX` 
========================================================================================

.. raw:: html

    <div class="mytitle">
    <h1 style="background-color:lightgrey"> 
          <span class="alarm">Status of </span> 
          <i>Opticks</i> : GPU Optical Photon Simulation for Particle Physics with NVIDIA® OptiX™ 
    </h1>
    </div>

    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP &mdash; https://bitbucket.org/simoncblyth/opticks &mdash; Jan 2019, SJTU, Shanghai </h2>
    </div>



Outline 
----------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small


    .. raw:: html

       <span>&nbsp;</span>


    * Optical Photon Simulation Problem...

      * Hybrid solution : *Geant4* + *Opticks*

    * What is Ray tracing ? 
    * Rendering and Simulation 
    * NVIDIA OptiX Ray Tracing Engine

    * Translate Geant4 geometry to GPU without approximation 


    * 2018 Progress Highlights : Ease-of-use

      * Approach towards Goal : Geant4+Opticks Examples Distributed with Geant4
      * Direct Geometry Translation
      * Adopt Modern CMake Configuration  

    * 2018 Progress Highlights : Validation Iteration 

      * JUNO PMT modelling issues

    * Opticks : One Page Overview




    .. raw:: html

       <span></span>





`Optical Photon Simulation Problem...`
---------------------------------------------------------

:i:`JPMT Before Contact 2`
--------------------------


.. sidebar:: Optical Photon Problem

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Optical photons : naturally parallel, simple :**
           * produced by Cerenkov+Scintillation 
           * yield only Photomultiplier hits

         **-> Hybrid Solution : Geant4 + Opticks** 


:i:`Ray-tracing vs Rasterization`
-----------------------------------

.. image:: /env/presentation/nvidia/nv_rasterization.png
   :width: 550px
   :align: left

.. image:: /env/presentation/nvidia/nv_raytrace.png
   :width: 550px
   :align: right


.. comment

   Rasterization
   
   * starts from the objects in a scene, and projects them onto pixels in image plane
   * approximation : usually triangulated geometry   
   
   ray-tracing 
  
   * closer to the physics -> easier to create realistic images with raytracing 
   * can use analytic geometry, rasterization is  


:small:`Ray Traced Image Rendering ≈ Optical Photon Simulation`
-------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right


.. class:: small

    **Rendering and optical photon simulation closely related:**

    * both limited by ray-geometry intersection 
    * industry continuously improving ray trace performance 
    * NVIDIA Turing GPU : raytrace dedicated hardware "RT Cores"  
      
      * *"10+ Giga-ray intersections per second per GPU"*


:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."

   **NVIDIA expertise:**

   * ~linear scaling with CUDA cores across multiple GPUs
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * :red:`compiler optimized for GPU ray tracing`
   * regular updates, profit from new GPU features:

     * NVIDIA RTX™ with Volta, Turing GPUs

.. class:: tiny

       ``https://developer.nvidia.com/rtx``

.. class:: small

   **User provides (Yellow):**

   * ray generation
   * geometry bounding box, intersects 



:i:`BVH`
---------------------------






:small:`Opticks : translates G4 geometry to GPU, without approximation`
------------------------------------------------------------------------------------


.. sidebar:: :small:`Direct Geometry Translation`

    .. class:: small

        * :red:`2018:` **full reimplementation of translation**
        * automatic geo-management, simplifying usage      
        * substantial reduction in Opticks codebase 
        * dependencies eliminated : Assimp, G4DAE
        * G4 geometry[2] auto-translated to Opticks GPU CSG geometry 
          without approximation 
        * geometry persisted in geocache, staleness checked by digest, as optimization  

.. class:: small

    **Direct Geometry : Geant4 "World" -> Opticks CSG -> GPU**
      * simpler : no G4DAE+GDML export/import

    **Material/Surface/Scintillator properties**
      * interpolated to standard wavelength domain
      * interleaved into "boundary" texture  
      * "reemission" texture for wavelength generation 

    **Structure**
      * repeated geometry instances identified (progeny digests)
      * instance transforms used in OptiX/OpenGL geometry 
      * merge CSG trees into global + instance buffers 
      * export meshes to glTF 2.0 for 3D visualization

    **Ease of Use**
      * easy geometry : just handover "World"
      * easy config : modern CMake + BCM[1]
      * ~easy event :  modify G4Cerenkov + G4Scintillation
      
    .. class:: tiny

        [1] Boost CMake 3.5+ modules : configure direct dependencies only

        [2] G4 primitives used need corresponding Opticks implementations, contributions for 
            any unsupported geometry are welcome 
          
        https://github.com/BoostCMake/cmake_modules

        https://github.com/simoncblyth/bcm         


.. comment 

    .. sidebar:: Volumes -> Boundaries 

        .. class:: small

          **Ray tracing favors Boundaries**

          Material/surface boundary : 4 indices

          * outer material (parent)
          * outer surface (inward photons, parent -> self)
          * inner surface (outward photons, self -> parent)
          * inner material (self)

          Primitives labelled with unique boundary index

          * ray primitive intersection -> boundary index
          * texture lookup -> material/surface properties











:small:`Progress towards Goal : Geant4+Opticks Examples Distributed with G4`
----------------------------------------------------------------------------------------

.. sidebar:: :small:`Aims of the Examples`
    
    .. class:: small

        * exposure to *Opticks* for all *Geant4* users 
        * quickstart for *Geant4* + *Opticks* learning / evaluation
        * demonstrate utility of scintillation + Cerenkov *gensteps* to *Geant4* members

.. class:: small

    Goal motivated 2018 development focus on ease-of-use:  
    
    1. :red:`Direct Geometry Translation, automating geometry management`
    2. *G4Opticks* integration API, enabling simple embedding of *Opticks* within *Geant4* applications
    3. Modern CMake Configuration, automating configuration


    *Geant4* + *Opticks* History

    **2014** : 19th Geant4 Collaboration Meeting, Okinawa
         proto-Opticks (G4DAE) presented 

    **2017** : 22nd Geant4 Collaboration Meeting, Australia
         presented Opticks (CSG on GPU) to plenary session 
 
         * discussions on how *Opticks* might be integrated with *Geant4*, 
           settle on an advanced example as initial target 
          
    **2018** : 23rd CHEP Conference, Bulgaria 
         discussions with Geant4 EM/Optical coordinator reach agreement on high level 
         structure of example
 
         * primary concern from *Geant4* members is that ongoing support for the examples
           will be provided  




.. raw:: html

   <span></span>


.. comment

    The experience of trying to get several users up and running
    with Opticks at the start of 2018 made me realize how vital  
    ease of use is making  





:small:`Opticks 2018 : Progress on Validation`
---------------------------------------------------------------------------------

.. class:: small

    * devised bi-executable aligned validation approach 

      * shared geocache + gensteps allows production and development executables 
        to perform duplicate bi-simulations (on GPU and CPU) 
      
      * "best-of-both-worlds" : same optical propagation simultaneously 
        within production and development environments 

      * development executable simulates only optical photons, simplifying 
        *Geant4* environment : enabling random sequence alignment 
 
    * :red:`several iterations of JUNO geometry validation`

      * reveal issue with JUNO PMT model




:small:`Modern CMake configuration infrastructure`
----------------------------------------------------

.. class:: small

    Automated transitive dependency handing 
      
    * drastically simpler internal config : only direct dependencies
    * drastically simpler external usage (integrating Opticks into a simpler what motivated the 
      change 
       
    * modern CMake best practive target export/import approach
      with boilerplate removed thanks to use of BCM (Boost CMake modules) 

      * dependency ordered list of ~20 CMake projects  
      * simpler external usage of any Opticks subtree 


:small:`JUNO Geometry Validation Interations`
----------------------------------------------------

.. class:: small

    * JUNO geometry problems identified (whilst trying to validate)
 
      * expensive and highly problematic PMT neck CSG (cylinder subtract torus)
 
        * solution : new neck model -> simple polycone 
          (z-cut hyperboloid not supported by geant4)   

      * expensive PMT cathode CSG modelling  

        * solution : new cathode model -> simple z-cut sphere  




:small:`2019 : Ideas`
------------------------------------


.. class:: small

    Opticks uses gensteps to split optical simulation between CPU and GPU.

    * could also split between a master process and slaves on other nodes

    Future discussion idea : "genstep" API for G4Scintillation + G4Cerenkov, for flexible
    external photon simulation 
         

         * distributing "gensteps" across multiple nodes 





    

:small:`Outline of Opticks : Problem, Solution, Geometry, Validation` 
---------------------------------------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. comment

      * OptiX Performance Scaling with GPU cores

.. class:: tiny

    * Optical Photon simulation problem, hybrid solution : Geant4 + Opticks
    * Ray Traced Image Synthesis ≈ Optical Photon Simulation
      
    * NVIDIA OptiX Ray Tracing Engine

      * BVH : Boundary Volume Hierarchy  
      * BVH Pascal : software emulation
      * BVH Turing : hardware "RT Cores"

    * Primitives

      * GPU Geometry starts from ray-primitive intersection
      * Torus : much more difficult/expensive than other primitives

    * CSG : Constructive Solid Geometry modelling 

      * Shapes defined "by construction" 
      * Which primitive intersect to pick ? 
      * Ray intersection with general CSG binary trees, on GPU 
      * Complete Binary Tree Serialization -> simplifies GPU side
      * Evaluative CSG intersection Pseudocode : recursion emulated
      * CSG Deep Tree : JUNO "fastener", balancing reduces tree height: 11 -> 4 
      * Geometry visualizations : Daya Bay Near Site, JUNO Central Detector
      * CSG : (Cylinder - Torus) PMT neck : spurious intersects
      * CSG : Alternative PMT neck designs 

    * Translation 

      * Auto-Instancing 
      * Opticks : translates G4 geometry to GPU, without approximation 
      * Opticks : Export of G4 geometry to glTF 2.0
      * Opticks : translates G4 optical physics to GPU

    * Validation : Opticks/G4 statistical comparison

      * Simple Lights/Geometries 
      * 1M Rainbow S-Polarized

    * Random Aligned Validation -> direct comparison  

      * Take Control of Geant4 Random Number Generator (RNG)
      * Aligning CPU and GPU Simulations
      * Direct comparison of GPU/CPU NumPy arrays
      * Coincident Faces are Primary Cause of Issues : Spurious Intersects

    * Summary



`Optical Photon Simulation Problem...`
---------------------------------------------------------

:i:`JPMT Before Contact 2`
--------------------------


.. sidebar:: Optical Photon Problem

    .. class:: small

         **Cosmic muon backgrounds**
           many millions of optical photons in JUNO scintillator

         **Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Optical photons : naturally parallel, simple :**
           * produced by Cerenkov+Scintillation 
           * yield only Photomultiplier hits

         **-> Hybrid Solution : Geant4 + Opticks** 



:small:`Ray Traced Image Synthesis ≈ Optical Photon Simulation`
-------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right

    .. class:: tiny

        http://on-demand.gputechconf.com/siggraph/2013/presentation/SG3106-Building-Ray-Tracing-Applications-OptiX.pdf


.. class:: small

    Geometry, light sources, optical physics ->  

    * pixel values at image plane
    * photon parameters at detectors (eg PMTs)

    **Ray tracing has many applications** :

    * advertising, design, entertainment, games,...
    * BUT : most ray tracers just render images

    **Ray-geometry intersection**

    * hw+sw continuously optimized over 30 years
    * NVIDIA : *"10+ Giga-ray intersections per second per GPU"*
      (Turing GPU : hardware BVH acceleration )


.. raw:: html

    <pre class="mypre">

    </pre>
 
.. class:: small


    **ray tracing**
      :blue:`cast rays thru image pixels into scene, recursively reflect/refract at
      intersects, combine returns into pixel values` 

    **rasterization**
      project 3D primitives onto 2D image plane, combine fragments into pixel values 
          




:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."

   **NVIDIA expertise:**

   * ~linear scaling with CUDA cores across multiple GPUs
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * :red:`compiler optimized for GPU ray tracing`
   * regular updates, profit from new GPU features:

     * NVIDIA RTX™ with Volta, Turing GPUs

.. class:: tiny

       ``https://developer.nvidia.com/rtx``

.. class:: small

   **User provides (Yellow):**

   * ray generation
   * geometry bounding box, intersects 




:small:`Opticks : GPU Geometry starts from ray-primitive intersection`
-------------------------------------------------------------------------------------------------

.. class:: small

   * 3D parametric ray : **ray(x,y,z;t) = rayOrigin  +  t * rayDirection** 
   * implicit equation of primitive : **f(x,y,z) = 0**  
   * -> polynomial in **t** , roots: **t > t_min**  -> intersection positions + surface normals

.. figure:: /env/presentation/tboolean_parade_sep2017.png
   :width: 900px
   :align: center

   :red:`CUDA/OptiX intersection for ~10 primitives` -> :blue:`Exact geometry translation`




:small:`Torus : much more difficult/expensive than other primitives`
------------------------------------------------------------------------

.. sidebar:: Torus artifacts

    .. image:: /env/presentation/tboolean_torus_orthographic_artifact.png
       :width: 400px
       :align: right

   .. image:: /env/presentation/torus_eqn_sqrt.png
       :width: 400px
       :align: right

   .. image:: /env/presentation/torus_eqn_quartic.png
       :width: 400px
       :align: right



.. class:: small

   3D parametric ray : **ray(x,y,z;t) = rayOrigin  +  t * rayDirection** 

   * ray-torus intersection -> solve quartic polynomial in **t**  
   *  A t^4 + B t^3 + C t^2 + D t + E = 0 

   High order equation 

   * very large difference between coefficients 
   * varying ray -> wide range of coefficients
   * numerically problematic, requires double precision 
   * several mathematical approaches used

   **Best Solution : replace torus**

   * eg model PMT neck with hyperboloid, not cylinder-torus


   

:small:`Torus : different artifacts as change implementation/params/viewpoint`
--------------------------------------------------------------------------------

.. class:: small

   * :red:`Only use Torus when there is no alternative` 
   * especially avoid CSG combinations with Torus  

.. image:: /env/presentation/torus_cloud_artifact_2017_08_14.png
   :width: 500px
   :align: left

.. image:: /env/presentation/torus_cuts_artifact_2017_08_08.png
   :width: 550px
   :align: right

.. image:: /env/presentation/torus_fan_artifact_2017_07_28.png
   :width: 350px
   :align: right
 


 


:small:`Constructive Solid Geometry (CSG) : Shapes defined "by construction"`
-------------------------------------------------------------------------------

.. sidebar:: CSG Binary Tree

    .. image:: /env/presentation/hanrahan_example_of_solid_object_formed_using_csg.png
       :width: 450px
       :align: right

    .. class:: small

       Primitives combined via binary operators 


.. class:: small

   Simple *by construction* definition, implicit geometry.

   * **A, B** implicit primitive **solids** 
   * **A + B** : union (OR)
   * **A * B** : intersection (AND) 
   * **A - B** : difference (AND NOT) 
   * **!B** : complement (NOT) (inside <-> outside)

   CSG expressions 

   * non-unique: **A - B == A * !B**
   * represented by binary tree, primitives at leaves

   3D Parametric Ray : **ray(t) = r0 + t rDir**  


   **Ray Geometry Intersection**

   * primitive : find *t* roots of implicit eqn
   * composite : :red:`pick` primitive intersect, depending on CSG tree


.. class:: large

   :red:`How to pick exactly ?`



:small:`CSG : Which primitive intersect to pick ?`
-------------------------------------------------------
    

.. sidebar:: In/On/Out transitions

    .. class:: small

    .. image:: /env/presentation/hanrahan_example_of_solid_object_formed_using_csg_roth_diagram.png
       :width: 450px
       :align: right


.. class:: small

   Classical Roth diagram approach

   * find all ray/primitive intersects
   * recursively combine inside intervals using CSG operator
   * works from leaves upwards

   Computational requirements:

   * find all intersects, store them, order them
   * recursive traverse

   BUT : **High performance on GPU requires**:

   * massive parallelism -> more the merrier
   * low register usage -> keep it simple
   * small stack size -> **avoid recursion** 

.. class:: large

   :red:`Classical approach not appropriate on GPU`




:small:`Ray intersection with general CSG binary trees, on GPU`
---------------------------------------------------------------------------------

.. sidebar:: Outside/Inside Unions

    .. class:: small

       dot(normal,rayDir) -> Enter/Exit

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_outside.png
       :width: 300px
       :align: center

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_inside.png
       :width: 300px
       :align: center

    .. class:: small

        * **A + B** boundary not inside other 
        * **A * B** boundary inside other 


.. class:: small

   Pick between pairs of nearest intersects, eg:

   =======================  ===========  ===============  ============== 
   *UNION* tA < tB           Enter B      Exit B           Miss B
   =======================  ===========  ===============  ============== 
   **Enter A**               ReturnA      :blue:`LoopA`    ReturnA
   **Exit A**                ReturnA      ReturnB          ReturnA 
   **Miss A**                ReturnB      ReturnB          ReturnMiss
   =======================  ===========  ===============  ============== 

   * *Nearest hit intersect algorithm* [1] avoids state

     * sometimes :blue:`Loop` : advance **t_min** , re-intersect both 
     * classification shows if inside/outside

   * *Evaluative* [2] implementation emulates recursion: 

     * :red:`recursion not allowed` in OptiX intersect programs
     * bit twiddle traversal of complete binary tree 
     * stacks of postorder slices and intersects 

   * :red:`Identical geometry to Geant4` 

     * solving the same polynomials 
     * near perfect intersection match



.. class:: tiny

    [1] Ray Tracing CSG Objects Using Single Hit Intersections, Andrew Kensler (2006)
        with corrections by author of XRT Raytracer http://xrt.wikidot.com/doc:csg
 
    [2] https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_boolean.h
        Similar to binary expression tree evaluation using postorder traverse. 




:i:`Opticks Analytic JUNO Chimney, GPU Raytrace (0)`
---------------------------------------------------------------------

:i:`Opticks Analytic JUNO PMT Snap, GPU Raytrace (1)`
---------------------------------------------------------------------

:i:`j1808_top_ogl`
--------------------

:i:`j1808_top_rtx`
--------------------

:i:`j1808_escapes`
--------------------






:small:`CSG : (Cylinder - Torus) PMT neck : spurious intersects`
---------------------------------------------------------------------------------


.. image:: /env/presentation/tboolean_12_rasterized.png
   :width: 550px
   :align: right

.. image:: /env/presentation/tboolean_12_raytrace.png
   :width: 550px
   :align: left

.. class:: small

    OptiX Raytrace and OpenGL rasterized wireframe comparing neck models:

    1. Ellipsoid + Hyperboloid + Cylinder
    2. Ellipsoid + :red:`(Cylinder - Torus)` + Cylinder 

    **Best Solution : use simpler neck model for physically unimportant PMT neck** 



:small:`CSG : Alternative PMT neck designs`
----------------------------------------------------------------------------

.. image:: /env/presentation/x018_torus_hyperboloid_plt.png
   :width: 550px
   :align: left

.. image:: /env/presentation/x018_torus_hyperboloid_plt_zoom.png
   :width: 500px
   :align: right

.. class:: small

   Hyperboloid and Cone defined using *closest point on ellipse to center of torus circle* 

   * Cylinder-Torus : purple line, Cone : green, **simplest** 
   * Hyperboloid : dashed magenta, works with *Opticks*, BUT *G4Hype* has no z-range flexibility 

.. class:: tiny

    https://bitbucket.org/simoncblyth/opticks/src/tip/ana/x018_torus_hyperboloid_plt.py 




:small:`Opticks : translates G4 geometry to GPU, without approximation`
------------------------------------------------------------------------------------

.. sidebar:: Volumes -> Boundaries 

    .. class:: small

      **Ray tracing favors Boundaries**

      Material/surface boundary : 4 indices

      * outer material (parent)
      * outer surface (inward photons, parent -> self)
      * inner surface (outward photons, self -> parent)
      * inner material (self)

      Primitives labelled with unique boundary index

      * ray primitive intersection -> boundary index
      * texture lookup -> material/surface properties


.. class:: small

    **Direct Geometry : Geant4 "World" -> Opticks CSG -> GPU**
      * simpler : no G4DAE+GDML export/import

    **Material/Surface/Scintillator properties**
      * interpolated to standard wavelength domain
      * interleaved into "boundary" texture  
      * "reemission" texture for wavelength generation 

    **Structure**
      * repeated geometry instances identified (progeny digests)
      * instance transforms used in OptiX/OpenGL geometry 
      * merge CSG trees into global + instance buffers 
      * export meshes to glTF 2.0 for 3D visualization

    **Ease of Use**
      * easy geometry : just handover "World"
      * easy config : modern CMake + BCM[1]
      * ~easy event :  modify G4Cerenkov + G4Scintillation
      
    .. class:: tiny

        [1] Boost CMake 3.5+ modules : configure direct dependencies only
          
        https://github.com/BoostCMake/cmake_modules

        https://github.com/simoncblyth/bcm         




:small:`Opticks : translates G4 optical physics to GPU`
-----------------------------------------------------------


.. sidebar:: GPU Resident Photons

    .. class:: small

       **Seeded on GPU** 
          associate photons -> *gensteps* (via seed buffer)
 
       **Generated on GPU, using genstep param:**
         * number of photons to generate
         * start/end position of step

       **Propagated on GPU**
          :red:`Only photons hitting PMTs copied to CPU`


       Thrust: **high level C++ access to CUDA**

       .. figure:: /env/numerics/thrust/thrust.png
          :width: 300px
          :align: right

       * https://developer.nvidia.com/Thrust
       
          

         
.. class:: small

    :blue:`OptiX : single-ray programming model` -> line-by-line translation

    **CUDA Ports of Geant4 classes**
      * G4Cerenkov (only generation loop) 
      * G4Scintillation (only generation loop) 
      * G4OpAbsorption
      * G4OpRayleigh 
      * G4OpBoundaryProcess (only a few surface types)

    **Modify Cerenkov + Scintillation Processes**
      * collect *genstep*, copy to GPU for generation
      * :red:`avoids copying millions of photons to GPU`

    **Scintillator Reemission**
      * fraction of bulk absorbed "reborn" within same thread
      * wavelength generated by reemission texture lookup

    **Opticks (OptiX/Thrust GPU interoperation)** 
      * **OptiX** : upload gensteps 
      * **Thrust** : seeding, distribute genstep indices to photons
      * **OptiX** : launch photon generation and propagation
      * **Thrust** : pullback photons that hit PMTs 
      * **Thrust** : index photon step sequences (optional)





:small:`Validation : Aligning CPU and GPU Simulations`
-------------------------------------------------------------------------------

.. sidebar:: lldb python scripting

    .. class:: small
 
       * access C++ program state from python 
       * step-by-step compare photon parameters with expectations, break at deviations

       Auto-configure breakpoints using code markers:

       ``opticks/tools/autobreakpoint.py``
       ``opticks/tools/g4lldb.py``


       **Ubiquitous Data access with NPY** 

       All Opticks data managed in NumPy buffers, 
       easy access from python,C++,CUDA,lldb-python 




.. class:: small

   **Aligned zipping together of code and RNG values**

   * common input photon sample generated on **CPU**  
   * random number sequences generated on **GPU** (cuRAND)
     and persisted to file (NPY buffers)
  
   Single executable ``lldb OKG4Test``:

   1. run Opticks GPU simulation, persist event  
   2. run Geant4 simulation 

      * step-by-step check each G4 photon follows Opticks 
        history and parameters, break at deviations
      
   3. fix cause of misaligned RNG consumption, or other deviation  

      * tricks needed on both sides : burning RNGs, jump backs

   **Payoff :**  :red:`simplest possible direct comparison validation`



.. class:: tiny

   http://bitbucket.com/simoncblyth/opticks/src/tip/tools/autobreakpoint.py 

   (lldb) help breakpoint command add



:small:`Validation : Direct comparison of GPU/CPU NumPy arrays`
------------------------------------------------------------------------------------


.. sidebar:: CPU/GPU matching

    .. class:: small

        **Simple geometries**
          same geometry, same physics, same results 

        **Full geometries**
          aligned running will find geometry issues    
          eg coincident surface ambiguity

        **NEXT:**
           align generation, reemission, more geometries


 
.. class:: small

   **tboolean-box simple geometry test**

   * 100k photons : position, time, polarization : 1.2M floats
   * 34 deviations > 1e-4 (mm or ns), largest 4e-4
   * deviants all involve scattering (more flops?)

.. raw:: html

    <pre class="mypretiny">

    In [11]: pdv = np.where(dv > 0.0001)[0]
    In [12]: ab.dumpline(pdv)
          0   1230 : TO BR SC BT BR BT SA         
          1   2413 : TO BT BT SC BT BR BR BT SA  
          2   9041 : TO BT SC BR BR BR BR BT SA 
          3  14510 : TO SC BT BR BR BT SA      
          4  14747 : TO BT SC BR BR BR BR BR BR BR 
          5  14747 : TO BT SC BR BR BR BR BR BR BR
        ...

    In [20]: ab.b.ox[pdv,0]                                 In [21]: ab.a.ox[pdv,0]
    Out[20]:                                                Out[21]: 
    A()sliced                                               A()sliced
    A([    [-191.6262, -240.3634,  450.    ,    5.566 ],    A([    [-191.626 , -240.3634,  450.    ,    5.566 ],
           [ 185.7708, -133.8457,  450.    ,    7.3141],           [ 185.7708, -133.8456,  450.    ,    7.3141],
           [-450.    , -104.4142,  311.143 ,    9.0581],           [-450.    , -104.4142,  311.1431,    9.0581],
           [  83.6955,  208.9171, -450.    ,    5.6188],           [  83.6954,  208.9172, -450.    ,    5.6188],
           [  32.8972,  150.    ,   24.9922,    7.6757],           [  32.8973,  150.    ,   24.992 ,    7.6757],
           [  32.8972,  150.    ,   24.9922,    7.6757],           [  32.8973,  150.    ,   24.992 ,    7.6757],
           [ 450.    , -186.7449,  310.6051,    5.0707],           [ 450.    , -186.7451,  310.605 ,    5.0707],
           [ 299.2227,  318.1443, -450.    ,    4.8717],           [ 299.2229,  318.144 , -450.    ,    4.8717],
     ...
    </pre>

.. class:: tiny

    http://bitbucket.com/simoncblyth/opticks/src/tip/notes/issues/tboolean_box_perfect_alignment_small_deviations.rst



:small:`Coincident Faces are Primary Cause of Issues : Spurious Intersects`
-------------------------------------------------------------------------------------------------

.. sidebar:: Cylinder - Cone 

    .. class:: small

       Coincident endcaps -> spurious intersects 

    .. image:: /env/opticks_refs/lvidx_83_tbool_coincidence_artifact_at_cylinder_base.png
       :width: 450px
       :align: center

    .. class:: small

       Grow subtracted cone downwards, avoids coincidence : **does not change composite solid**

.. class:: small

    Coincidences common (alignment too tempting?). To fix:

    * **A-B** : grow correct dimension of subtracted shape
    * **A+B** : grow smaller interface shape into bigger, making join

    * :red:`case-by-case fixes straightforward, not so easy to automate`
    * WIP: automated coincidence finder/fixer 

    .. image:: /env/opticks_refs/opticks_tscan_29_nzero_5_OcrGdsPrt.png
       :width: 500px
       :align: left





:small:`Opticks(1) : Aims to Revolutionize JUNO Muon Simulation` 
------------------------------------------------------------------------------

.. sidebar:: :small:`100 GeV muon, millions of photons`

    .. image:: /env/presentation/opticks_juno_pmt_muon_approach_portrait.png
       :width: 450px
       :align: right

.. class:: small

    :blue:`State-of-the-art GPU ray tracing(2) applied to optical simulation`

    * replaces Geant4 optical simulation with GPU equivalent

      * translate G4 geometry to GPU without approximation(3) 
      * port G4 optical physics to CUDA(4) 

    **Optical photons generated+propagated entirely on GPU**
      
    * only photons hitting PMTs require CPU memory 

      * optical photon CPU memory --> ~zero 

    * muon workload perfect for GPUs, *Opticks* > 1000x *Geant4*

      * optical photon CPU time --> ~zero 

    **Status : validation iteration ongoing**  

    * validation by direct comparison of random sequence aligned GPU and CPU simulations
    * minor PMT neck geometry simplifications(5) needed to proceed to next iteration

    
.. class:: tiny

   (1) Open source project http://bitbucket.org/simoncblyth/opticks 

   (2) NVIDIA OptiX ray tracing engine  

   (3) using innovative Constructive Solid Geometry implementation on GPU

   (4) scattering, boundary, reemission, absorption
 
   (5) PMT neck : "cylinder-torus" -> polycone, avoids numerical issues with torus in CSG








:i:`Summary`
---------------------------

.. sidebar:: Opticks > 1000x Geant4 (*)

   .. class:: small

       GPU massive parallelism **eliminates bottleneck**.

       * optical photon simulation time --> zero 
       * optical photon CPU memory --> zero

       [zero: effectively, compared to rest of simulation]

       **More Photons -> More Benefit** 

       * huge time/energy savings for JUNO 

       http://bitbucket.org/simoncblyth/opticks

       (*) core extrapolated from mobile GPU speed

.. comment
   
   Performance factors of three orders of magnitude 
   are because simulating millions of optical photons 
   is a near perfect fit for the strengths of the GPU

   Neutrino detectors can benefit the most as their operation
   depends on production and propagation of sometimes many millions
   of optical photons. 

   **Radical speedup -> short development cycle -> improved understanding** 




:small:`Summary`
----------------------------------------------

.. sidebar:: Highlights

   .. class:: small

      * **identical GPU geometry, auto-translated**  
      * aligned running -> simple validation 
      * expect: **Opticks > 1000x Geant4** (with workstation GPUs) 
      * more photons -> more overall speedup 

        * 99% -> 100x 


.. image:: /env/presentation/1px.png
   :width: 500px
   :height: 50px

..

  *Opticks* enables *Geant4* based simulations to benefit from 
  **effectively zero time and zero CPU memory** optical photon simulation, 
  due to massive parallelism made accessible by NVIDIA OptiX.

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 10px

  * Drastic speedup -> better detector understanding -> greater precision
  * Performance discontinuity -> new possibilities -> imagination required

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 10px

  .. class:: small

    Subscribe to stay informed on Opticks:

  .. class:: huge

     opticks+subscribe@groups.io 

     https://groups.io/g/opticks

     https://bitbucket.org/simoncblyth/opticks



:small:`Opticks References`
-------------------------------------------------------------------------------

.. sidebar:: :small:`Introductions`

    .. class:: small

        https://bitbucket.org/simoncblyth/intro_to_numpy
           Introducing NumPy, Array-oriented computing 

        https://bitbucket.org/simoncblyth/intro_to_cuda
           Introducing CUDA and Thrust 
            
        https://github.com/simoncblyth/np
           NumPy Array Serialization from C++


 
https://simoncblyth.bitbucket.io
   Opticks presentations and videos

https://groups.io/g/opticks
   Opticks mailing list archive 

opticks+subscribe@groups.io 
   send email to this address, to subscribe

.. class:: huge

    https://simoncblyth.bitbucket.io/opticks/index.html
       Opticks installation instructions

    https://bitbucket.org/simoncblyth/opticks
       Opticks code repository



:i:`OpticksDocs`
-------------------------------------------------------------------------------

.. sidebar:: Open Source Opticks

    .. class:: small

        * http://simoncblyth.bitbucket.io/opticks/
        * http://bitbucket.org/simoncblyth/opticks/

        Documentation, install instructions. Repository.

        * Mac, Linux, Windows (*)
        * ~20 C++ projects, ordered by dependency
        * ~370 "Unit" Tests (CMake/CTest) 
        * ~50 integration tests: tpmt, trainbow, tprism, treflect, tlens, tnewton, tg4gun, ...
        * NumPy/Python analysis/debugging scripts        

        Geometry/event data use NumPy serialization::

             import numpy as np
             a = np.load("photons.npy")

    .. class:: tiny

        (*) Windows VS2015, non-CUDA only, not recently!   









.. s5_background_image::

    #
    # slide titles and background image urls, 
    # including server relative urls like /env/geant4/geometry/collada/daeview/20140419-170713.png
    # and protocol relative urls like //localhost/env/test/LANS_AD3_CoverGas_Humidity.png
    #
    # NB1 slide titles here must match those in body precisely, 
    # NB2 also ensure all slide titles are unique
    #
    #slide0
    #/env/geant4/geometry/collada/g4daeview/20140419-170713.png auto_auto 0px_0px
    #/env/geant4/geometry/collada/g4daeview/20140419-170713-1024x768.png auto_auto 0px_0px
    #
    #   wide targetting 1280x720
    #   
    #
    slide0
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    Opticks Benefits
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    Visualizing An Optical Photon Simulation
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 640px_360px 600px_100px

    Overview
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    g4daeview.py : Fast OpenGL 3D viewer for G4DAE files
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png

    Cerenkov Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-115923.png

    Cerenkov Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-115935.png

    Scintillation Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-121444.png

    Scintillation Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-121435.png

    Standard Geant4 Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.001.png

    External Photon Simulation Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.002.png

    GGeoView
    /env/graphics/ggeoview/ggeoview-cerenkov-001.png 1047px_795px

    GGeoView M1 Points
    /env/graphics/ggeoview/ggeoview-scintillation-points-mat1.png 1435px_848px

    GGeoView Flag Selection 
    /env/graphics/ggeoview/ggeoview-scintillation-flag-seq-select.png 1436px_842px

    GGeoView Cerenkov Geom M1
    /env/graphics/ggeoview/ggeoview-cerenkov-m1-geom.png 1416px_845px
  
    Detecting Neutrinos via Optical Photons 1
    /env/presentation/dayabay-principal_half.png 1417px_830px 

    Detecting Neutrinos via Optical Photons 2
    /env/presentation/dayabay-principal_half.png 1417px_830px 
 
    JPMT Inside Wide 
    /env/graphics/ggeoview/jpmt-inside-wide_half.png 1432px_844px

    JPMT Wide
    /env/graphics/ggeoview/jpmt-wide_half.png 1409px_836px
  
    JPMT Headview
    /env/graphics/ggeoview/jpmt-headview_half.png 1308px_783px
 
    JPMT Backview
    /env/graphics/ggeoview/jpmt-backview_half.png 1149px_794px 
 
    JPMT Approach 
    /env/graphics/ggeoview/jpmt-approach_half.png 1431px_839px

    JPMT Arrival 
    /env/graphics/ggeoview/jpmt-arrival_half.png 1427px_841px 
 
    Optical Photon Simulation Problem...
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact 2
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact 3
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

 
    JPMT After Contact 
    /env/graphics/ggeoview/jpmt-after-contact_half.png 1425px_840px 
  
    JPMT Inside Outside 
    /env/graphics/ggeoview/jpmt-inside-outside_half.png 1401px_842px

    NVIDIA OptiX In Action
    /env/presentation/optix-in-action_half.png 966px_646px 100px_50px

    PmtInBox approach 1
    /env/graphics/ggeoview/PmtInBox-approach.png 1069px_769px 

    PmtInBox approach 2
    /env/graphics/ggeoview/PmtInBox-approach.png 1069px_769px 

    PmtInBox after 1
    /env/graphics/ggeoview/PmtInBox-after.png 1057px_760px 

    PmtInBox after 2
    /env/graphics/ggeoview/PmtInBox-after.png 1057px_760px 

    Daya Bay PMT Wall Photo 1
    /env/presentation/gtc2016/dyb-pmt-wall-photo.png 1329px_798px  

    Daya Bay PMT Wall Photo 2
    /env/presentation/gtc2016/dyb-pmt-wall-photo.png 1329px_798px  

    Super-Kamiokande PMTs Not 16:9 
    /env/presentation/gtc2016/sk-PH20-water-withboat-apr23-wm.png 1181px_771px

    Super-Kamiokande PMTs 1
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 2
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 3
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 4
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Kamiokande II 1
    /env/presentation/1987a.png 1280px_720px

    Kamiokande II 2
    /env/presentation/1987a.png 1280px_720px

    Kamiokande II 3
    /env/presentation/1987a.png 1280px_720px


    Fast Optical Photon Simulation
    /env/presentation/newtons-opticks.png 374px_684px 800px_0px

    Photomultiplier Tubes (PMTs)
    /env/presentation/hamamatsu-pmt-16x9.png 1280px_720px

    Photomultiplier Tube Operation
    /env/presentation/hamamatsu-pmt-16x9.png 1280px_720px

    Old Hamamatsu Photomultiplier Tubes (PMTs)
    /env/presentation/hamamatsu-pmt.png 1099px_734px

    Old Photomultiplier Tube Operation
    /env/presentation/hamamatsu-pmt.png 1099px_734px




    Jiangmen Underground Neutrino Observatory (JUNO) 
    /env/presentation/juno-schematic-5.png 1391px_734px

    Jiangmen Underground Neutrino Observatory, Goals
    /env/presentation/juno-schematic-5.png 1391px_734px


    Dayabay Reactor Neutrino Expt, Far Site
    /env/presentation/DybFar_crop.png 1280px_720px

    Daya Bay Far Site 2
    /env/presentation/DybFar_crop.png 1280px_720px

    Daya Bay Far Site 3
    /env/presentation/DybFar_crop.png 1280px_720px

    Geant4 : Monte Carlo Simulation Toolkit 
    /env/presentation/g4-hep.png 1025px_621px 100px_100px 

    Geant4 : Monte Carlo Simulation Toolkit Generality
    /env/presentation/g4-hep.png 1025px_621px 100px_100px 

    "Seeing" neutrinos via scintillation + Cherenkov light
    /env/presentation/cherenkov.png 316px_203px 850px_400px

    Opticks : Auto-Instancing
    /env/graphics/ggeoview/ggv-juno-instancing.png 852px_592px 450px_80px

    NVIDIA OptiX 1
    /env/presentation/NVIDIAOptiXWebsite_Oct2016.png 1280px

    NVIDIA OptiX 2
    /env/presentation/NVIDIAOptiXWebsite_Oct2016.png 1280px

    OpticksDocs
    /env/presentation/OpticksDocs.png 1280px_720px

    Daya Bay Antineutrino Detection via Inverse Beta Decay 1
    /env/presentation/AntineutrinoDetectionViaIBDJetterSept2014.png 809px_576px 100px_100px

    Daya Bay Antineutrino Detection via Inverse Beta Decay 2
    /env/presentation/AntineutrinoDetectionViaIBDJetterSept2014.png 809px_576px 100px_100px
    # a = np.array([1676.0, 1192.0])
    # .8*720.*a/1192.

    Daya Bay Energy Response Model (1)
    /env/presentation/ZheTaupDetectorResponseModel.png 968px_576px 100px_100px

    Daya Bay Energy Response Model (2)
    /env/presentation/ZheTaupDetectorResponseModel.png 968px_576px 100px_100px

    # a = np.array([2392., 1424.]) ; .8*720*a/a[1]



    Daya Bay Energy Response Model : Fit to Calibration Data 1
    /env/presentation/EnergyResponseModel.png 693px_504px 0px_100px 
    # a = np.array([1760., 1280.])
    # .8*720.*a/1280.   792px_576px
    # 693.,  504

    Daya Bay Energy Response Model : Fit to Calibration Data 2
    /env/presentation/ConstrainingNonLinearity.png 761px_553px 0px_80px
    # a = np.array([1698., 1166.])
    # .8*720.*a/1166. 
    
    Daya Bay nGd Analysis : Most Precise Theta13
    /env/presentation/DYBZheTaup2015Theta13OscillationAnalysis.png 1057px_625px 100px_60px
    # a = np.array([2140., 1266.])
    # .8*720.*a/1166.


    Opticks Analytic Daya Bay Near Site, GPU Raytrace (3)
    /env/presentation/op_full_raytrace_3.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (1)
    /env/presentation/op_full_raytrace_1.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (0)
    /env/presentation/op_full_raytrace_0.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (2)
    /env/presentation/op_full_raytrace_2.png 1280px_720px

    Opticks Analytic JUNO Chimney, GPU Raytrace (0)
    /env/presentation/j1707_chimney_analytic_raytrace.png 1280px_720px

    Opticks Analytic JUNO PMT Snap, GPU Raytrace (1)
    /env/presentation/j1707-okop-snap.png 1280px_720px

    GPU Instance Culling with Level Of Detail
    /env/presentation/j1707_lod_oglrap_instcull.png 1280px_720px

    Opticks Export of G4 geometry to glTF 2.0
    /env/yoctoglrap/dyb_near_venice_half.png 1020px_737px

    What are NumPy Arrays
    /env/presentation/what_are_numpy_arrays.png 1280px_720px

    What are NumPy Arrays 2
    /env/presentation/what_are_numpy_arrays.png 1280px_720px

    BVH
    /env/presentation/nvidia/NV_Turing_Editors_Day_029.png 1280px_720px

    BVH Pascal 
    /env/presentation/nvidia/NV_Turing_Editors_Day_030.png 1280px_720px
 
    BVH Turing
    /env/presentation/nvidia/NV_Turing_Editors_Day_031.png 1280px_720px

    #
    #  original 2880px_1620px
    #  half     1440px_810px

    NVIDIA Turing GPU : 72 SM, 4608 CUDA cores
    /env/presentation/nvidia/NV_Turing_Editors_Day_009.png 1280px_720px

    NVIDIA Turing GPU : 72 SM, 4608 CUDA cores (spec)
    /env/presentation/nvidia/NV_Turing_Editors_Day_009.png 1280px_720px
 
    Raytrace vs Raster
    /env/presentation/nvidia/NV_Turing_Editors_Day_132.png 1280px_720px

    Ray-tracing vs Rasterization
    /env/presentation/nvidia/black.png 1280px_720px

    Raytrace Diagram
    /env/presentation/graphics/1024px-ray_trace_diagram.svg.png 1280px_720px

    # https://images.anandtech.com/doci/13282/NV_Turing_Editors_Day_132.png
    #
    #   1280 720
    #   1920 1080  *1.5
    #  https://www.anandtech.com/Gallery/Album/6660#6
    # 

    j1808_top_ogl
    /env/presentation/j1808/j1808_top_ogl.png 1280px_720px

    j1808_top_rtx
    /env/presentation/j1808/j1808_top_rtx.png 1280px_720px
    #   1920 1080

    j1808_escapes
    /env/presentation/j1808/j1808_escapes.png

   

.. comment

    :small:`Opticks : Marketing`
    ---------------------------------------------------------------------------------

    .. class:: small

        Longterm survival of Opticks requires many users, paying with their time...
        
        * conference talks + proceedings papers + web presence -> awareness -> interest    

          * prospects : unprecedented simulation speed -> many people interested      

        Opticks has been installed/evaluated by a brave few .. To get it 
        into the hands of everyone who can benefit from it requires :
       
        **Product Development**

        * easy examples -> simple configuration  
        * easy onboarding -> automated geometry translation    
        * easy validation -> tools, documentation 

        **Existing Marketing** 

        * web presences : bitbucket repo + documentation pages 
        * conference talks + proceedings 
        * groups.io forum/mailing list 

        **Planned Marketing**

        * extended Opticks examples distributed with Geant4
     
          * Geant4 collaboration are agreeable (their primary concern was that ongoing support for the example is needed)     

        * low volume mailing list bulletins 
        * mailing list invitations to appropriate people across multiple experiments  


