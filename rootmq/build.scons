""" 
    Currently this uses pkg/env/aberdeen-config 
    based Flag parsers ...

"""
Import("env")

tools = []

# external code installed by system pkg manager 
tools += [ 'glib', 'gthread', ]

# external code installed by bash functions : rmqc- , root-
tools += [ 'rmqc', 'root', ] 


# code compiled by SCT/SCons 
tools += [ 'priv', 'cjsn', ]     # 'abtmodel' not needed here 


er = env.Clone( tools=tools  )

headers = [
   'include/MQ.h',
   'include/MyTMessage.h',
   'include/root2cjson.h',
   'include/rootmq.h',
   'include/LinkDef.hh'
]   
rcd = er.RootcintDictionary( 'rootmq' , headers )  

er.Append( CPPPATH=['include'] )
er.Append( CPPPATH=['$MAIN_DIR'] )  ## the dict has includes with paths from the dir above containing the main.scons 

EWorkaroundSwallowedXlinker( er )
#ESortedDump(er)
er.ComponentLibrary('rootmq' , Glob('src/*.c') + rcd + Glob('src/*.cc') )


#
# On Linux running the test requires the external rmqc-libdir in LD_LIBRARY_PATH 
# On OSX was able to run without  DYLD_LIBRARY_PATH preparation ?
#

er.Append( LIBS=['rootmq'] )

er.Tool("libpath")   ## blunt instrument .. TODO: finesse to get just the necessary 

er.Tool('env_private_path')
#er.Tool('env_libpath')
er.Tool('env_dump')
er.Tool("sct_dump", LIBS=True , CPPPATH=True, LIBPATH=True  )

er.ComponentTestProgram( 
   prog_name='mq_sendstring', 
   source=['mq_sendstring.cc'],
 )
   
# COMPONENT_TEST_RUNNABLE=False


