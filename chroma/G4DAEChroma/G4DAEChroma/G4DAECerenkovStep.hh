#ifndef G4DAECERENKOVSTEP_H
#define G4DAECERENKOVSTEP_H 

// machinery to serialize the stack from DsG4Cerenkov::PostStepDoIt 

/*


In [1]: a = np.load("1.npy")

In [2]: a
Out[2]: 
array([[[      0.   ,       0.   ,       0.   ,       0.   ],
        [ -16536.295, -802084.812,   -7066.   ,       0.844],
        [     -2.057,       3.18 ,       0.   ,       3.788],
        [     -1.   ,       1.   ,       1.   ,     299.791],
        [      0.   ,       0.   ,       0.   ,       0.719],
        [      0.482,      79.201,      79.201,      79.201]],

       [[      0.   ,       0.   ,       0.   ,       0.   ],
        [ -16538.354, -802081.625,   -7066.   ,       0.857],
        [     -2.058,       3.18 ,       0.   ,       3.788],
        [     -1.   ,       1.   ,       1.   ,     299.791],
        [      0.   ,       0.   ,       0.   ,       0.719],
        [      0.482,      79.201,      79.201,      79.201]],



    In [5]: a[:,0].view(np.int32)
    Out[5]: 
    array([[   0,    1,    0,   80],
           [   1,    1,    0,   88],
           [   2,    1,    0,   81],
           ..., 
           [8767,    1,    0,  104],
           [8768,    1,    0,  103],
           [8769,    1,    0,   30]], dtype=int32)


    In [6]: a[:,1]
    Out[6]: 
    array([[ -16536.295, -802084.812,   -7066.   ,       0.844],
           [ -16538.354, -802081.625,   -7066.   ,       0.857],
           [ -16540.41 , -802078.438,   -7066.   ,       0.87 ],
           ..., 
           [ -20876.361, -795411.062,   -7084.686,      27.399],
           [ -20878.424, -795407.875,   -7084.706,      27.412],
           [ -20880.488, -795404.688,   -7084.725,      27.424]], dtype=float32)


    In [7]: a[:,2]
    Out[7]: 
    array([[-2.057,  3.18 ,  0.   ,  3.788],
           [-2.058,  3.18 ,  0.   ,  3.788],
           [-1.743,  2.695,  0.   ,  3.21 ],
           ..., 
           [-2.064,  3.176, -0.019,  3.788],
           [-2.064,  3.176, -0.019,  3.788],
           [-0.873,  1.344, -0.008,  1.602]], dtype=float32)


    In [8]: a[:,3]
    Out[8]: 
    array([[  -1.   ,    1.   ,    1.   ,  299.791],
           [  -1.   ,    1.   ,    1.   ,  299.791],
           [  -1.   ,    1.   ,    1.   ,  299.791],
           ..., 
           [  -1.   ,    1.   ,    1.   ,  299.79 ],
           [  -1.   ,    1.   ,    1.   ,  299.79 ],
           [  -1.   ,    1.   ,    1.   ,  299.79 ]], dtype=float32)


    In [10]: a[:,4,0]
    Out[10]: array([ 0.,  0.,  0., ...,  0.,  0.,  0.], dtype=float32)

    In [11]: a[0,4,0]
    Out[11]: 1.55e-06

    In [12]: a[:,4,0]
    Out[12]: array([ 0.,  0.,  0., ...,  0.,  0.,  0.], dtype=float32)

    In [13]: np.max(a[:,4,0])
    Out[13]: 1.55e-06

    In [14]: np.max(a[:,4,1])
    Out[14]: 1.55e-05

    In [15]: np.max(a[:,4,2])
    Out[15]: 1.395e-05

    In [16]: np.max(a[:,4,2])



    In [18]: a[:,5]
    Out[18]: 
    array([[  0.482,  79.201,  79.201,  79.201],
           [  0.482,  79.201,  79.201,  79.201],
           [  0.482,  79.201,  79.201,  79.201],
           ..., 
           [  0.482,  79.201,  79.201,  79.201],
           [  0.482,  79.201,  79.201,  79.201],
           [  0.482,  79.201,  79.201,  79.201]], dtype=float32)



*/

struct G4DAECerenkovStep {

    enum {

       _Id, 
       _ParentID,
       _Material,
       _NumPhotons,
      
       _x0_x,
       _x0_y,
       _x0_z,
       _t0,

       _DeltaPosition_x,
       _DeltaPosition_y,
       _DeltaPosition_z,
       _step_length,

       _code, 
       _charge, 
       _weight, 
       _MeanVelocity,

       _BetaInverse,
       _Pmin,  
       _Pmax,   
       _maxCos,

       _maxSin2,
       _MeanNumberOfPhotons1,
       _MeanNumberOfPhotons2,
       _MeanNumberOfPhotonsMax,

       SIZE

    };

    int id ; // avoid empty 
};


#endif 


