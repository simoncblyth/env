/////////// DsChromaRunAction_BeginOfRunAction //////////////////////////
///
///  * configure G4DAEChroma singleton
///  * add trojan SD, providing backdoor for adding GPU hits 
///
///  NB when used outside of NuWa need to define NOT_NUWA and a 
///     transform cache needs to be available and referenced by 
///     cachekey envvar 
///
///
/////////////////////////////////////////////////////////////////////


string getenvvar( const string& key , const string& def  )
{
    const char* val = getenv(key.c_str());
    return ( val == NULL ) ? string(def) : string(val) ; 
} 


void DsChromaRunAction_BeginOfRunAction( const string& m_transport, const string& m_cachekey, const string& m_sensdet, ITouchableToDetectorElement* t2de, const string& m_idParameter )
{ 
    cout << "DsChromaRunAction_BeginOfRunAction" << endl ;

    string cache_dir = getenvvar(m_cachekey, ".");
    string transport_cfg = getenvvar(m_transport, "");

    cout << "\t transport " << setw(30) << m_transport << "[" << transport_cfg << "]" << endl ;
    cout << "\t cachekey  " << setw(30) << m_cachekey  << "[" << cache_dir << "]" << endl ;
    cout << "\t sensdet   " << setw(30) << m_sensdet << endl ;
    cout << "\t idParameter  " << m_idParameter << " (not used for MockNuWa running)" << endl ;


    G4DAEChroma* chroma = G4DAEChroma::GetG4DAEChroma();

    /// transport 

    G4DAETransport* transport = new G4DAETransport(m_transport.c_str());
    chroma->SetTransport( transport );


    //// transform cache

    G4DAETransformCache* cache = NULL ;
#ifndef NOT_NUWA
    DybG4DAEGeometry* geometry  = new DybG4DAEGeometry(t2de, m_idParameter.c_str());
    cache = geometry->CreateTransformCache(NULL); 
    cache->Archive(cache_dir.c_str()); 
#else
    if(G4DAETransformCache::Exists(cache_dir.c_str())) cache = G4DAETransformCache::Load(cache_dir.c_str()); 
#endif
    assert(cache); // transform cache is required 
    chroma->SetTransformCache(cache);



     ///  sensdet 

    const char* target = m_sensdet.c_str() ; 
    string trojan = "trojan_" ;
    trojan += target ;

    G4DAESensDet*  sensdet = G4DAESensDet::MakeSensDet(trojan.c_str(), target );
    sensdet->Print(); 

    DybG4DAECollector* collector = new DybG4DAECollector ;
    sensdet->SetCollector(collector); 

    G4SDManager* SDMan = G4SDManager::GetSDMpointer();
    SDMan->AddNewDetector( sensdet );
    chroma->SetSensDet( sensdet );  

    SDMan->ListTree();
    cout << "DsChromaRunAction::BeginOfRunAction AddNewDetector [" << sensdet->GetName() << "]" << endl ; 

}


