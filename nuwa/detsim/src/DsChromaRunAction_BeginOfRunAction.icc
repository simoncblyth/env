/////////// DsChromaRunAction_BeginOfRunAction //////////////////////////
///
///  * configure G4DAEChroma singleton
///  * add trojan SD, providing backdoor for adding GPU hits 
///
///  NB when used outside of NuWa need to define NOT_NUWA and a 
///     transform cache needs to be available and referenced by 
///     cachekey envvar 
///
///
///
///  FOR BUILD TO SEE EDITS : touch DsChromaRunAction.cc  
///
/////////////////////////////////////////////////////////////////////


#define VERBOSE


string getenvvar( const string& key , const string& def  )
{
    const char* val = getenv(key.c_str());
    return ( val == NULL ) ? string(def) : string(val) ; 
} 


void DsChromaRunAction_BeginOfRunAction( 
       const string& _transport, 
       const string& _cachekey, 
       const string& _sensdet, 
       const string& _database, 
       ITouchableToDetectorElement* _t2de, 
       const string& _idParameter,
       bool _enableChroma,
       const string& _chromaFlags
      )
{ 
    string cache_dir = getenvvar(_cachekey, ".");
    string transport_cfg = getenvvar(_transport, "");
    string database_cfg = getenvvar(_database, "");

#ifdef VERBOSE
    cout << "G4DAEChroma Config" << endl ;
    cout << "\t transport " << setw(30) << _transport << "[" << transport_cfg << "]" << endl ;
    cout << "\t cachekey  " << setw(30) << _cachekey  << "[" << cache_dir << "]" << endl ;
    cout << "\t sensdet   " << setw(30) << _sensdet << endl ;
    cout << "\t database  " << setw(30) << _database  << "[" << database_cfg << "]" << endl ;
    cout << "\t idParameter  " << _idParameter << " (not used for MockNuWa running)" << endl ;
#endif

    G4DAEChroma* chroma = G4DAEChroma::GetG4DAEChroma();

    // just use the json flags 
    // chroma->AddFlags(_chromaFlags);   // Add not Set, to not stomp on JSON loaded config 

    cout << "DsChromaRunAction_BeginOfRunAction WARNING : IGNORING _chromaFlags argument " << _chromaFlags << endl ;  
    
    cout << "DsChromaRunAction_BeginOfRunAction chromaFlags " << chroma->Flags() << endl;   

    cout << "flags 0x" << hex << chroma->GetFlags() << dec << " dec " << chroma->GetFlags() << endl ; 

     ////  database

    G4DAEDatabase* database = new G4DAEDatabase(_database.c_str());
    chroma->SetDatabase( database );

    G4DAEMetadata* meta = new G4DAEMetadata("{}");
    chroma->SetMetadata( meta );

    if(!_enableChroma)
    {
        cout << "DsChromaRunAction_BeginOfRunAction chroma propagation is disabled " << endl ;  
        return ;
    } 

    /// transport 

    G4DAETransport* transport = new G4DAETransport(_transport.c_str());
    chroma->SetTransport( transport );
    chroma->Handshake();

    G4DAEMetadata* handshake = chroma->GetHandshake();
    //handshake->Print("DsChromaRunAction_BeginOfRunAction handshake");

    G4DAEMaterialMap* cmm = new G4DAEMaterialMap(handshake, "/chroma_material_map"); 
    chroma->SetMaterialMap(cmm);
    //cmm->Print("#chroma_material_map");
    

#ifndef NOT_NUWA
    // full nuwa environment : allows to obtain g4 material map from materials table
    G4DAEMaterialMap* gmm = new G4DAEMaterialMap(); 
#else
    // non-nuwa : need to rely on handshake metadata for g4 material map
    G4DAEMaterialMap* gmm = new G4DAEMaterialMap(handshake, "/geant4_material_map"); 
#endif
    //gmm->Print("#geant4_material_map");

    int* g2c = G4DAEMaterialMap::MakeLookupArray( gmm, cmm );
    chroma->SetMaterialLookup(g2c);


    //// transform cache

    G4DAETransformCache* cache = NULL ;
#ifndef NOT_NUWA
    // full nuwa environment
    DybG4DAEGeometry* geometry  = new DybG4DAEGeometry(_t2de, _idParameter.c_str());
    cache = geometry->CreateTransformCache(NULL); 

    Map_t gmms = gmm->GetStringMap();
    cache->AddMetadata("geant4_material_map", gmms );

    printf("DsChromaRunAction_BeginOfRunAction : archive cache to %s\n", cache_dir.c_str());
    cache->Archive(cache_dir.c_str()); 

#else
    if(G4DAETransformCache::Exists(cache_dir.c_str())) cache = G4DAETransformCache::Load(cache_dir.c_str()); 
#endif
    assert(cache); // transform cache is required 
    chroma->SetTransformCache(cache);


    //
    //  sensdet 
    //
    //   trojan
    //          with access to the hit collections of the target
    //          by stealing pointers to them
    //   chroma
    //          with separate hit collections mirroring structure of the target 
    //

    const char* target = _sensdet.c_str() ; 

    G4DAESensDet* tsd = G4DAESensDet::MakeTrojanSensDet(target, new DybG4DAECollector) ;
    chroma->SetTrojanSensDet( tsd );  

    G4DAESensDet* sd = G4DAESensDet::MakeChromaSensDet(target, new DybG4DAECollector) ;
    chroma->SetSensDet( sd );  

    //
    //  The Chroma ActiveSensDet determines where GPU hits 
    //  will be collected. 
    //
    //  For simultaneous testing of Chroma and Geant 
    //  this shoud be the separate ChromaSensDet 
    //  hit collections.
    //
    //  When Geant4 optical photons are switched off
    //  this needs to be the TrojanSensDet 
    //  in order that the rest of the simulation has
    //  some hits to work with.
    //   
    //

    bool simultaneous = true ;   
    if(simultaneous)
    {
        chroma->SetActiveSensDet(sd);
    }
    else
    {
        chroma->SetActiveSensDet(tsd);
    }


    G4SDManager* SDMan = G4SDManager::GetSDMpointer();
    SDMan->ListTree();

}


//  FOR BUILD TO SEE EDITS : touch DsChromaRunAction.cc    OR touch mocknuwa.cc
