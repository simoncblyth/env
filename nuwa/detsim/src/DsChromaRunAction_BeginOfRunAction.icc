/////////// DsChromaRunAction_BeginOfRunAction //////////////////////////
///
///  * configure G4DAEChroma singleton
///  * add trojan SD, providing backdoor for adding GPU hits 
///
///  NB when used outside of NuWa need to define NOT_NUWA and a 
///     transform cache needs to be available and referenced by 
///     cachekey envvar 
///
///
///
///  FOR BUILD TO SEE EDITS : touch DsChromaRunAction.cc  
///
/////////////////////////////////////////////////////////////////////


#define VERBOSE


string getenvvar( const string& key , const string& def  )
{
    const char* val = getenv(key.c_str());
    return ( val == NULL ) ? string(def) : string(val) ; 
} 


void DsChromaRunAction_BeginOfRunAction( 
       const string& _transport, 
       const string& _cachekey, 
       const string& _sensdet, 
       const string& _database, 
       ITouchableToDetectorElement* _t2de, 
       const string& _idParameter,
       bool _enableChroma 
      )
{ 
    string cache_dir = getenvvar(_cachekey, ".");
    string transport_cfg = getenvvar(_transport, "");
    string database_cfg = getenvvar(_database, "");

#ifdef VERBOSE
    cout << "G4DAEChroma Config" << endl ;
    cout << "\t transport " << setw(30) << _transport << "[" << transport_cfg << "]" << endl ;
    cout << "\t cachekey  " << setw(30) << _cachekey  << "[" << cache_dir << "]" << endl ;
    cout << "\t sensdet   " << setw(30) << _sensdet << endl ;
    cout << "\t database  " << setw(30) << _database  << "[" << database_cfg << "]" << endl ;
    cout << "\t idParameter  " << _idParameter << " (not used for MockNuWa running)" << endl ;
#endif

    G4DAEChroma* chroma = G4DAEChroma::GetG4DAEChroma();

     ////  database

    G4DAEDatabase* database = new G4DAEDatabase(_database.c_str());
    chroma->SetDatabase( database );

    G4DAEMetadata* meta = new G4DAEMetadata("{}");
    chroma->SetMetadata( meta );

    if(!_enableChroma)
    {
        cout << "DsChromaRunAction_BeginOfRunAction chroma propagation is disabled " << endl ;  
        return ;
    } 

    /// transport 

    G4DAETransport* transport = new G4DAETransport(_transport.c_str());
    chroma->SetTransport( transport );


    //// transform cache

    G4DAETransformCache* cache = NULL ;
#ifndef NOT_NUWA
    DybG4DAEGeometry* geometry  = new DybG4DAEGeometry(_t2de, _idParameter.c_str());
    cache = geometry->CreateTransformCache(NULL); 

    printf("DsChromaRunAction_BeginOfRunAction : archive cache to %s\n", cache_dir.c_str());

    cache->Archive(cache_dir.c_str()); 
#else
    if(G4DAETransformCache::Exists(cache_dir.c_str())) cache = G4DAETransformCache::Load(cache_dir.c_str()); 
#endif
    assert(cache); // transform cache is required 
    chroma->SetTransformCache(cache);


     ///  sensdet 

    const char* target = _sensdet.c_str() ; 
    string trojan = "trojan_" ;
    trojan += target ;

    printf("DsChromaRunAction_BeginOfRunAction : stealing hit collections from %s into %s \n", target, trojan.c_str() );

    G4DAESensDet*  sensdet = G4DAESensDet::MakeSensDet(trojan.c_str(), target );
#ifdef VERBOSE
    sensdet->Print(); 
#endif

    DybG4DAECollector* collector = new DybG4DAECollector ;
    sensdet->SetCollector(collector); 

    G4SDManager* SDMan = G4SDManager::GetSDMpointer();
    SDMan->AddNewDetector( sensdet );
    chroma->SetSensDet( sensdet );  

#ifdef VERBOSE
    SDMan->ListTree();
    cout << "DsChromaRunAction::BeginOfRunAction AddNewDetector [" << sensdet->GetName() << "]" << endl ; 
#endif

}

//
//  FOR BUILD TO SEE EDITS : touch DsChromaRunAction.cc  
//

