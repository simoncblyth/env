
.. include:: <s5defs.txt>

.. |e| replace:: http://dayabay.phys.ntu.edu.tw/e
.. |env| replace:: http://dayabay.phys.ntu.edu.tw/env
.. |envtrac| replace:: http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk


.. s5_background_image::

    #
    # slide titles and background image urls, 
    # including server relative urls like /env/geant4/geometry/collada/daeview/20140419-170713.png
    # and protocol relative urls like //localhost/env/test/LANS_AD3_CoverGas_Humidity.png
    #
    # first slide id is exceptionally: slide0, not the mangled title
    slide0
    /env/geant4/geometry/collada/daeview/20140419-170713.png auto_auto 0px_0px

    Full Screen
    images/chroma/chroma_dayabay_adlid.png
 
    Full Screen 2
    images/chroma/chroma_dayabay_pool_pmts.png

    daeviewgl.py : Fast OpenGL 3D viewer for G4DAE files
    /env/geant4/geometry/collada/daeview/20140419-170713.png

    G4DAE viewer : Pool Bottom
    /env/geant4/geometry/collada/daeview/20140419-170957.png

    G4DAE viewer : Pool Bottom, Chroma Raycast 
    /env/geant4/geometry/collada/daeview/20140419-171014.png
 
    # the image is too big to be shown as is 
    #G4DAE Dayabay Near Site 
    #images/osx_preview/osx_preview_g4dae_dayabay.png 
    
    #Chroma Raycast Illustration
    #/env/chroma/chroma_camera/chroma_raycast_illustration.png 1000px_auto 200px_100px


======================================================================
200x Faster Optical Photon Propagation with NuWa + Chroma ?
======================================================================

.. class:: small

    http://dayabay.phys.ntu.edu.tw/env/muon_simulation/presentation/gpu_optical_photon_simulation.html
    http://dayabay.phys.ntu.edu.tw/env/muon_simulation/presentation/gpu_optical_photon_simulation.pdf
    http://dayabay.phys.ntu.edu.tw/env/muon_simulation/presentation/gpu_optical_photon_simulation.txt

.. sidebar:: Objective 

   Make GPU accelerated Optical Photon Propagation **routine**

Introducing Chroma 

* http://chroma.bitbucket.org

Fivefold path:

#. :green:`Export G4 Geometry as DAE`
#. :green:`Convert DAE to Chroma` 
#. :blue:`Chroma Validation, raycasting`
#. :red:`G4/Chroma Integration`
#. :red:`Chroma vs G4 Validation`

Chroma : Ultra-fast Photon MC
------------------------------

**Developed by Stan Seibert, University of Pennsylvania.**

Chroma tracks photons through a :red:`triangle-mesh detector geometry`, 
simulating processes like diffuse and specular reflections, 
refraction, Rayleigh scattering and absorption. Using triangle meshes 
eliminate geometry code as :red:`just one code path`.

200x performance claim:

   *With a CUDA GPU Chroma has propagated 2.5M photons per second 
   in a detector with 29k photomultiplier tubes. This is
   200x faster than GEANT4.*

**BUT:** Chroma needs : :red:`triangles + inside/outside materials`

.. class:: small

   http://on-demand.gputechconf.com/gtc/2013/presentations/S3304-Particle-Physics-With-PyCUDA.pdf


:small:`G4DAE : Export Geant4 Geometry into DAE files`
-------------------------------------------------------

.. class:: small

    General Geant4 geometry exporter based on GDML+VRML2 exporters, writes COLLADA DAE, including:

    * volume tree: PV/LV hierarchy 
    * geometry: vertices, triangles+quads 
    * materials 
    * surfaces (skin and border surfaces)
    * material/surface properties as function of wavelength 

.. class:: small

   * http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/geant4/geometry/DAE 
   * http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/geant4/geometry/export
   * http://www.khronos.org/collada/

:small:`G4DAE capable NuWa`: ``./dybinst -X geant4_with_dae trunk all``

.. image:: images/G4DAEWrite.png 
   :height: 700px
   :align: center


:small:`G4DAE : Export Compared to VRML2(WRL)`
-----------------------------------------------

.. class:: small

    * Comparison of all vertices/faces reveals :red:`boolean solids are discrepant`. 
    * Perfect [#perfect]_ agreement only achieved by *cheating* : :blue:`perform triangulation once and reuse`.

.. class:: small

    ====================  ==============  ===========  ===============
     Qty                    DayaBay         Lingao          Far
    ====================  ==============  ===========  ===============
    Volumes                     12,229        12,229          18,903 
    Triangles                2,448,064     2,448,064       4,189,680
    Vertices                 1,245,996     1,245,996       2,128,208
    DAE/GDML/WRL (MB)        6.9/4.0/98   6.9/4.0/96     8.6/6.0/167                    
    ====================  ==============  ===========  ===============

.. class:: tiny

    ``VGDX_20140414`` counts using ``daeviewgl.py -g 0: --with-chroma``

.. class:: small

    * Triangulation sensitivity impact :red:`needs checking`
    * DAE not much bigger than GDML, but includes all triangles/vertices

.. class:: tiny

    .. [#perfect] Maximum DAE WRL offset < 0.13 mm, after patching VRML2 export precision bug. 
                  Details: http://dayabay.phys.ntu.edu.tw/e/geant4/geometry/collada/dae_cf_wrl/ 


:small:`G4DAE : Triangular Advantage` 
--------------------------------------

.. class:: small

    Surface representation simplicity (vertices+triangles) and COLLADA standard 
    file format means many tools/libraries available, allowing high level development.
    Basis libraries used for developments:

    * ``daenode.py`` : G4DAE => Chroma geometry

       * https://github.com/pycollada/pycollada  numpy based DAE parsing
       * http://www.numpy.org

    * ``daeserver.py`` : 3D WebGL interface to G4DAE geometry

       * https://github.com/mrdoob/three.js/  Javascript 3D 

    * ``daeviewgl.py`` : Fast OpenGL 3D viewer/navigator

       * http://pyopengl.sourceforge.net   OpenGL from python 
       * https://code.google.com/p/glumpy/  pyopengl+numpy integration

.. class:: small

   http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/geant4/geometry/collada/daenode.py
   http://belle7.nuu.edu.tw/dae/tree/3148.html



https://bitbucket.org/scb-/chroma :small:`Forked, changes so far:` 
-------------------------------------------------------------------

.. class:: small

    * Minor changes to get operational 
    * Stability + efficiency improvements, enabling mobile development [#hw]_

.. class:: tiny

   .. [#hw] MacBook Pro (2013), NVIDIA GeForce GT 750M 2048 MB ; 
            Workstation GPUs such as NVIDIA Kepler K20 expected at least ~3x faster

.. image:: /env/chroma/chroma_fork.png 
   :width: 700px
   :align: center


:small:`Chroma Raycasting : exercises geometry intersection`
-------------------------------------------------------------

.. class:: small

    Raycasting exercises slowest part of optical photon propagation: :red:`geometry intersection`. 
 
.. image:: /env/chroma/chroma_camera/chroma_raycast_illustration.png 
   :width: 600px
   :align: center

.. class:: small

    * Shoot rays thru every pixel out into geometry, 1 CUDA thread for each, typically >1M rays
    * Find triangle intersections using BVH [#bvh]_ acceleration structure
    * Determine color based on ray to triangle normal angle
    * Alpha blend nearest 10 surfaces, providing transparency effect  

.. class:: tiny

    .. [#bvh] Boundary Volume Heirarchy, a tree of bounding boxes with triangles inside leaf nodes



:small:`Chroma Raycast Worst Case (~entire geometry) Example` 
---------------------------------------------------------------- 

.. class:: small

    Render Split into 3x3 CUDA kernel launches, 1 thread per pixel, ~1.8s for 1.23M pixels, 2.4M tris.

.. image:: /env/chroma/chroma_camera/20140423-162109.png
   :width: 800px
   :align: center

.. class:: tiny 


    daeviewgl.py --target=.. --eye="-0.3,-1.1,1.7" --look="0.1,0.4,-0.6" --up="1.2,2.0,1.6" --size=1440,852 --near=30.00000 --far=10000.0 --yfov=50.0 --with-chroma


.. wrk (1440, 852) [1226880]  lch  [3, 3, 1] [9]  blk [16, 16, 1] [256]  0.03,0.26,0.12,0.15,0.79,0.20,0.06,0.20,0.04 TOT 1.84

.. http://dayabay.phys.ntu.edu.tw/env/geant4/geometry/export/DayaBay_VGDX_20140414-1300/


:small:`Chroma Raycast Triangle count (Dyb with RPC)`
----------------------------------------------------------------

.. class:: tiny

    daeviewgl.py --with-chroma --metric tri --flags 1,0    # tri/time/intersect

.. image:: /env/chroma/chroma_camera/pmt-tri-count-hotspots.png
   :height: 500px
   :align: center

:small:`All triangle intersections made, even when no visible contribution to render. (Potential for optimisation?)`


:small:`Chroma Stability/Efficiency Improvements Made`
------------------------------------------------------

.. class:: small

    :green:`Split work into multiple CUDA kernel launch, arranged in 2D pattern` [#cuda2d]_ 

    * avoids kernel launch times exceeding 5 seconds 
    * 2D equalizes thread workload across CUDA warp(32 threads)  

    :green:`Reduced CPU load by reducing transfers`

    * create pixels on GPU, share between OpenGL and CUDA/Chroma [#pbo]_ 
    * compute photon directions via 4x4 uniform matrix rather than passing arrays 
    * change matrix to navigate, rather than array manipulating kernel launches 

    These improvements were necessary as *Chroma Camera* [#presume]_ with Dayabay geometry had
    
    * very heavy CPU load [#burn]_ and unusably laggy GUI 
    * frequent GPU panic, GUI freeze, hard system crash forcing reboot

 
.. class:: tiny

    .. [#cuda2d] http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/cuda/cuda_launch.py 

    .. [#pbo] Using OpenGL pixel buffer objects (PBO) and CUDA-OpenGL interoperability techniques, 
              http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/pycuda/pycuda_pyopengl_interop/pixel_buffer.py
              http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/chroma/chroma_camera/pbo_renderer.py

    .. [#presume] Presumably Chroma was developed using fast Linux desktop GPUs where the kernel time limit can be avoided. 

    .. [#burn] :red:`burning CPU errors` in system log


:small:`daeviewgl.py : Fast OpenGL 3D viewer for G4DAE files`  
-----------------------------------------------------------------------------   

.. class:: small

   G4DAE visualization [#daeviewgl_usage]_ and "backbone" application for Chroma testing.

   * flexible tree/list based partial geometry loading 
   * very fast/responsive 3D OpenGL visualization [#vbo]_
   * virtual trackball translate/rotate 
   * parallel or perspective projections 
   * interactive FOV and near/far plane clipping 
   * persistent viewpoint bookmarks 
   * animation by interpolation between bookmarks or orbiting 
   * Chroma interactive raycasting, including animated 
   * numerical control via UDP remote messaging 
   * screen capture

   Implementation [#daeviewgl_code]_ 

.. class:: tiny

   .. [#daeviewgl_usage] http://dayabay.phys.ntu.edu.tw/e/geant4/geometry/collada/daeview/daeview_usage/

   .. [#vbo] Implemented with single OpenGL Vertex Buffer Object (VBO) for entire geometry  

   .. [#daeviewgl_code] http://dayabay.phys.ntu.edu.tw/tracs/env/browser/trunk/geant4/geometry/collada/daeview/


:small:`daeviewgl.py : Video Tour`  
-----------------------------------------------------

.. s5_video:: /env/daeview_Movie_ipad.m4v
    :poster: /env/geant4/geometry/collada/daeview/20140419-170713.png
    :width: 60%


NuWa + Chroma : Progress along Fivefold path 
----------------------------------------------

.. class:: small

    :green:`Export G4 Geometry as DAE`  with G4DAE

    * boolean solid triangulation sensitivity
    * GDML/G4DAE bug omits some ``G4LogicalBorderSurface`` :red:`need confirmation/fix`
    * GDML/G4DAE ugly pointer addresses used in identifiers (change for each export)
    * :red:`rehome G4DAE from env repo into bitbucket for greater visibility`

    :green:`DAE to Chroma` mapping by DAENODE 

    * :red:`material/surface property mapping choices need validation`
    * Chroma needs : :red:`double sided surfaces` to represent ``G4LogicalBorderSurface``

    Chroma Validation: :green:`raycasting`, :blue:`hybrid`, :red:`propagation` 

    * raycasting: :green:`stability issues resolved` 
    * :blue:`hybrid raycasting` adds some parts of propagation, to be investigated
    * :red:`propagation tests`, to be investigated 

    :red:`Geant4/Chroma live Integration`, try Chroma server [#zeromq]_ requires Geant4 glue code:

    * :red:`collect optical photons and send to server` 
    * :red:`handle results`  either photons about to hit PMTs or hits 

    :red:`Chroma vs Geant4 Validation` plan:

    * comparison against conventional simulation production runs


.. class:: tiny

   .. [#zeromq] Based on ZeroMQ, a widely used open source message queue 



G4DAE Dayabay Near Site 
---------------------------------------------------

.. image:: images/osx_preview/osx_preview_g4dae_dayabay.png 
   :height: 700px
   :align: center


.. class:: small

   OSX Preview.app render


G4DAE Dayabay AD
---------------------------------------------

.. image:: images/osx_preview/osx_preview_g4dae_dayabay_ad.png 
   :width: 800px
   :align: center

.. class:: small

   OSX Preview.app render


Chroma Ray Tracing Dayabay Geometry (1)
--------------------------------------------

.. image:: images/chroma/chroma_dayabay_pmt_peek.png
   :width: 800px
   :align: center

Chroma Ray Tracing Dayabay Geometry (2)
--------------------------------------------

.. image:: images/chroma/chroma_dayabay_wall_pmts.png
   :width: 800px
   :align: center

Chroma Ray Tracing Dayabay Geometry (3)
--------------------------------------------

.. image:: images/chroma/chroma_dayabay_pool_pmts.png
   :width: 800px
   :align: center

Chroma Ray Tracing Dayabay Geometry (4)
--------------------------------------------

.. image:: images/chroma/chroma_dayabay_adlid.png
   :width: 800px
   :align: center


``G4DAE viewer : Pool Bottom``
-------------------------------

``G4DAE viewer : Pool Bottom, Chroma Raycast`` 
-----------------------------------------------



Chroma : Hardware requirements 
--------------------------------

Develop with Retina MacBook Pro (late 2013), NVIDIA GeForce GT 750M 2048 MB

.. sidebar:: Suitable GPUs only ~250-350 USD

   eg NVIDIA GeForce GTX 680 (1536 CUDA cores, 2048 MB, Compute Capability 3.0) ~ 330 USD

* NVIDIA GPU with CUDA Compute Capability (CCC) 2.0 at least 
* 1.5G of GPU memory (estimated minimum for Dayabay geometry)



 
