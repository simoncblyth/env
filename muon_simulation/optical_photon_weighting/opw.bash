# === func-gen- : muon_simulation/weighted_optical_photon/opw fgp muon_simulation/weighted_optical_photon/opw.bash fgn opw fgh muon_simulation/weighted_optical_photon
opw-src(){      echo muon_simulation/optical_photon_weighting/opw.bash ; }
opw-source(){   echo ${BASH_SOURCE:-$(env-home)/$(opw-src)} ; }
opw-vi(){       vi $(opw-source) ; }


opw-usage(){ cat << EOU

OPW
====

FUNCTIONS
---------

*opw-get*
    checkout my people copy of Davids OPW

*opw-gen-muons*
    10k muon vectors took ~6 seconds to generate, the sample is reproducible::

        [blyth@belle7 OPW]$ diff  tenthousandmuons tenthousandmuons.1 
        [blyth@belle7 OPW]$ 


*opw-prof*
    Profile running using Google perftools 
    http://google-perftools.googlecode.com/svn/trunk/doc/cpuprofile.html

*opw-sim*
    Create output directory structure and generate no argument opw-sim.py 
    script into it 


EOU
}
opw-dir(){ echo $(local-base)/env/muon_simulation/optical_photon_weighting/OPW ; }
opw-cd(){  cd $(opw-dir); }
opw-mate(){ mate $(opw-dir) ; }

opw-env(){     
    elocal- ; 

    local fast=$HOME/env-fast.sh
    [ -f "$fast" ] && . $fast       # NuWa dbg env
    [ ! -f "$fast" ] && echo $msg WARNING no fast $fast
    fast- ;             # for FAST profiling, profrun etc..
    export PYTHONPATH=$(opw-dir):$PYTHONPATH
}

opw-get(){
    local dir=$(dirname $(opw-dir)) &&  mkdir -p $dir && cd $dir
    local nam=$(basename $(opw-dir))

    [ -z "$DYBSVN" ] && echo $msg missing DYBSVN && return 1 
    [ ! -d "$nam" ] && svn co $DYBSVN/people/blyth/$nam
    [   -d "$nam" ] && svn up $nam
}

opw-prep(){
    opw-gen-muons
}

opw-gen-muons-smpl(){ echo $(opw-dir)/tenthousandmuons ; }
opw-gen-muons(){
    type $FUNCNAME
    opw-cd
    local smpl=$(opw-gen-muons-smpl)
    [ -f "$smpl" ] &&  echo $msg sample already created $smpl && return 0
   
    time Muon.exe -n 10000 -s DYB -seed 1377339 -r Yes -v RPC -music_dir $SITEROOT/../external/data/0.0/Muon > $smpl
    wc $smpl
    du -hs $smpl
}


opw-chk(){
    [ "$(which nuwa.py 2> /dev/null)" == "" ] && echo $msg setup nuwa environment first laddie && sleep 1000000000
}


opw-executions(){ echo 10 ; }
#opw-tag(){ echo ${OPW_TAG:-226} ; }
opw-tag(){ echo ${OPW_TAG:-base} ; }
opw-prefix(){  echo ${OPW_PREFIX:-profrun} ; }
opw-stamp-(){ date +"%Y%m%d-%H%M" ; }
opw-stamp(){ echo ${OPW_STAMP:-$(opw-stamp-)} ; }
opw-sim(){
   local msg="=== $FUNCNAME :"
   type $FUNCNAME
   opw-cd
   opw-chk

   mkdir -p output
   cd output

   local rundir=$(nuwaprep.py out log) 
   cd $rundir 
   echo $msg cd to rundir $rundir

   local script=$FUNCNAME.py
   local tag=$(opw-tag)
   opw-script- $tag > $script
   chmod ugo+x $script
   
   echo $msg generate script $script in $PWD
   cat $script

   #local cmdline="profrun $(which python) $script >& log/$tag.log "
   #echo $msg "$cmdline"
   #eval $cmdline

}


opw-prof-(){ cat << EOC
LD_PRELOAD=/usr/local/lib/libprofiler.so CPUPROFILE=$PWD/$(opw-tag).prof $(which python) opw-sim.py 
EOC
}

opw-prof(){
    local msg="=== $FUNCNAME :" 
    echo $msg cmdline below
    $FUNCNAME-
}


opw-hostid(){
  # nuwa.py relies on running hostid binary in separate process which 
   python -c "from DybPython.hostid import hostid ; print hostid()"
}



opw-args-(){ cat << EOL
 -R 3 -n $(opw-executions) -m "$(opw-sim-args)" -o out/$tag.root
EOL
}




opw-script-(){ 
   local tag=$1
   cat << EOS
#!/usr/bin/env python
"""
No-argument numa.py running script generated by $FUNCNAME
to act as a record of a nuwa.py invokation and allow 
convenient profiling by encapsulating all arguments into this
script. 

"""
import shlex
import sys
import os

modargs = {}
modargs['base'] = r"""
     fmcpmuon --use-pregenerated-muons --use-basic-physics --disable-op-weighting
"""

modargs['red'] = r"""
     fmcpmuon --use-pregenerated-muons --use-basic-physics 
        --wsLimit=1 
        --wsWeight=1 
        --adVolumes=['oil','lso','gds'] 
        --adLimits=[1,3000,1000] 
        --adWeights=[1,100,100]
"""

modtag='$tag'

quote = lambda _:"\""+_+"\""
modargl = shlex.split(modargs[modtag], posix=False)
argl = "--hostid $(opw-hostid) -R 3 -n $(opw-executions) -m " + quote(" ".join(modargl)) + " -o $tag.root "
print argl

sys.argv[1:] = shlex.split(argl)
print sys.argv[1:]

from DybPython.Control import main 
nuwa = main()
nuwa.run()
nuwa.finalize()

EOS
}



opw-sim-args(){ cat << EOA
     fmcpmuon --use-pregenerated-muons --use-basic-physics 
        --wsLimit=1 
        --wsWeight=1 
        --adVolumes=['oil','lso','gds'] 
        --adLimits=[1,3000,1000] 
        --adWeights=[1,100,100]

EOA
}


opw-chroma(){
    nuwa.py -n 1 -m "fmcpmuon --chroma"
}


opw-ana(){
   opw-chk
   opw-cd
   local tag=$(opw-tag)
   #nuwa.py -n -1 -m "opa" out/$tag.root >& log/${tag}opa.log
   nuwa.py -n -1 -m "opa" out/$tag.root 
}

opw-plt(){
   opw-chk
   opw-cd
   

}
