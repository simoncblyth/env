scm-src(){ echo scm/scm.bash  ;}
scm-source(){ echo ${BASH_SOURCE:-$(env-home)/$(scm-src)} ; }
scm-vi(){    vi $(scm-source) ; }
scm-usage(){
  
   cat << EOU

      An SCM is a combination of an SVN repository and a Tracitory , this provides
      commands to create these two tied objects in a coherent way.


      scm-create  <name> <arg> 
               
           Create a repository+tracitory (an scm) named <name> and if <arg> is 
           a valid directory path then import the content into it
           if <arg> is INIT then just create the branches/tags/trunk or if EMPTY
           the default leave the repository at revision 0

           For example : 
                scm-create data INIT         ## with branches/tags/trunk at revision 1
                scm-create data EMPTY        ## at revision 0 
                scm-create data /path/to/directory/to/put/into/trunk
                

      scm-wipe <name>
      
           Delete the repository + trac instance called <name>
                  
                  
      scm-rename <oldname> <newname>                  


                     
                                    
        NOTES ...
           * transition from old to new is as yet incomplete          
           * old way is overly complicated by attempting to support remote creation ...
        
          OLD STRUCTURE
          ================                                      
                      
              the initenv is done in   
                   oscm/scm-use.bash::scm-use-create-local
              which is called from 
                    oscm/scm.bash::scm-create
   
   
            
EOU

}

scm-env(){
  elocal-
}


scm-create(){

  local msg="=== $FUNCNAME :" 
  local name=$1
  shift 
  [ -z "$name" ]     && echo $msg an instance name must be provided && return 1

  svn-
  svn-create $name $*
  
  trac-
  trac-create $name 
   

}


scm-wipe(){
  local msg="=== $FUNCNAME :" 
  local name=$1
  shift 
  [ -z "$name" ]     && echo $msg an instance name must be provided && return 1


  svn-
  svn-wipe $name
  
  trac-
  trac-wipe $name    


}



scm-rename(){

  local msg="=== $FUNCNAME :" 
  local oldname=$1
  local newname=$2
  [ -z "$oldname" ]     && echo $msg an existing instance name must be provided for oldname     && return 1
  [ -z "$newname" ]     && echo $msg an non-existing instance name must be provided for newname && return 1

  svn-
  svn-rename $oldname $newname
  
  trac-
  trac-rename $oldname $newname    


}


scm-postcommit(){
   local msg="=== $FUNCNAME :"
   local name=${1:-$TRAC_INSTANCE}
   svn-
   local path=$(svn-postcommit-path $name)
   local tmp=/tmp/env/$FUNCNAME/$(basename $path) 
   mkdir -p $(dirname $tmp)
   trac-
   tractrac-
   scm-postcommit- > $tmp

   local cmd="sudo diff $path $tmp"
   echo $msg $cmd
   eval $cmd    

   cmd="sudo cp $tmp $path "
   local ans
   read -p "$msg enter YES to proceed with : $cmd : " ans
   [ "$ans" != "YES" ] && echo $msg skipping && return

   echo $msg proceeding ...
   eval $cmd  

   apache-
   apache-chown $path
   sudo chmod ugo+x $path
   sudo ls -l $(dirname $path)
}


scm-postcommit-(){ cat << EOP
#!/bin/sh
## generated by $FUNCNAME  $(date)
REPOS="\$1"
REV="\$2"

export LD_LIBRARY_PATH=$(python-libdir):\$LD_LIBRARY_PATH
$(which python) $(tractrac-dir)/contrib/trac-post-commit-hook -p "$(trac-envpath)" -r "\$REV"

EOP
}



