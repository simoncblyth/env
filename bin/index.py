#!/usr/bin/env python

from __future__ import print_function
import os, sys, logging, re
from dateutil.parser import parse
log = logging.getLogger(__name__)


yptn = re.compile("(?P<year>\d{4})")
mptn = re.compile("(?P<month>[a-z]*)(?P<year>\d{4})")

def extract_date_(name):
    ym = yptn.search(name)
    return int(ym.groupdict()["year"]) if ym else 0 
    

def extract_date_(name):
    mm = mptn.search(name)
    if mm:
         d = mm.groupdict()
         txt = "%(month)s%(year)s" % d 
         dt = parse(txt, default=None)
         epo = int(dt.strftime("%s"))
         #print("name:%s txt:%s dt:%s epo:%s" % (name,txt,dt,epo))
         return epo
    else:
         return 0           
    


def write_index_html(dir_):
    assert os.path.isdir(dir_), dir_
    opath = os.path.join(dir_, "index.html")
    if os.path.exists(opath):
        log.info("output path exists already %s : delete it and rerun to update " % opath)
    else:   
        #out = sys.stdout 
        log.info("writing to %s " % opath)
        out = file(opath, "w") 
        print("<html>", file=out) 
        print("<!-- generated by index.py -->", file=out)
        print("<!-- open http://localhost/env/presentation/index.html -->", file=out)
        print("<ul>", file=out)

        htms = filter(lambda p:p.endswith(".html"),os.listdir(dir_))
        htms = sorted(htms, key=extract_date_)
        for htm in htms:
            print("<li> <a href=\"%s\"> %s </a> </li>" % (htm, htm), file=out)
        pass
        print("</ul>", file=out)
        print("</html>", file=out) 
    pass


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    dir_ = sys.argv[1]
    write_index_html(dir_)

