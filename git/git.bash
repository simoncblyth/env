# === func-gen- : git/git fgp git/git.bash fgn git fgh git
git-src(){      echo git/git.bash ; }
git-source(){   echo ${BASH_SOURCE:-$(env-home)/$(git-src)} ; }
git-vi(){       vi $(git-source) ; }
git-env(){      elocal- ; }
git-usage(){ cat << EOU

Git
====

Reference
------------

* http://gitref.org/remotes/#fetch
* http://book.git-scm.com/book.pdf 
* http://www.git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository

* https://www.rath.org/mercurial-for-git-users-and-vice-versa.html


Git Books
-----------

* https://git-scm.com/book/en/v2

Getting Git on Server
-----------------------

* https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server#_getting_git_on_a_server


Fixing ssh environment to find newer than system git
-----------------------------------------------------

Cloning a bare repo over ssh from g4pb initially fails for lack 
of git-upload-pack in sshd PATH environment.
Succeeds after setup environment of sshd in g4pb (see dsmgit-).


Fetch a remote repo into an existing directory with bystanders
----------------------------------------------------------------

* avoid accidents by setting .gitignore to "*" so must always force to add things to repo

::

    cd /to/the/dir/
    git init                      ## creates .git dir
    git remote add <rnam> <url>    ## configure the remote
    git fetch <rnam> master        ## fetch objects from remote, without yet changing working copy

    git diff <rnam>/master                 ## compare current with what about to checkout
    git show <rnam>/master:.workflow.cnf   ## take a closer look

    git checkout master           ## now update working copy 
    ## hmm merge : shouldnt be needed, only one line ...


* note that this doesnt use "clone" as that creates a new dir, fetches and merges 



fetch into non empty dir
--------------------------

* https://stackoverflow.com/questions/2411031/how-do-i-clone-into-a-non-empty-directory

::

    git init

    git remote add origin PATH/TO/REPO

    git fetch

    git reset origin/master         
        # copies entries from origin/master  to the index
        # this is required if files in the non-empty directory are in the repo

    git checkout -t origin/master   # -t for --track
        # from index to working tree


git help reset
----------------

::

   git reset [-q] [<tree-ish>] [--] <paths>...

       This form resets the index entries for all <paths> to their state at
       <tree-ish>. (It does not affect the working tree, nor the current branch.)

       This means that git reset <paths> is the opposite of git add <paths>.

       After running git reset <paths> to update the index entry, you can use
       git-checkout(1) to check the contents out of the index to the working tree.
       Alternatively, using git-checkout(1) and specifying a commit, you can copy the
       contents of a path out of a commit to the index and to the working tree in one go.


So *reset* used like this enables a more controlled way of 
updating the working tree.  First from treeish into index and then checkout 
from index into working tree.




.gitignore vs .git/info/exclude
----------------------------------

::

   man gitignore


.gitignore 
    when committed it is shared by all clones of the repo 

.git/info/exclude 
    only applies to the local copy of the repository, not versioned


Patterns which a user wants Git to ignore in all situations 
(e.g., backup or temporary files generated by the user's editor of choice) generally go into a file
specified by core.excludesfile in the user's ~/.gitconfig. Its default value is $XDG_CONFIG_HOME/git/ignore. 
If $XDG_CONFIG_HOME is either not set or empty,
$HOME/.config/git/ignore is used instead.



Showing old versions of a file
---------------------------------

::

    delta:bin blyth$ git lg dot.py 
    * 1a20d0b - (uow/master, g4pb/master, arc/master) try direct HOME/.git approach to dot-backup with file/dir permission fixing (15 hours ago) <Simon C Blyth>
    * 6c48db5 - dot-backup dot-recover machinery using USB stick remote (2 days ago) <Simon C Blyth>
    * 5f5861b - dot machinery working to some extent, need to test permission recovery from fresh clones of dot repo (3 days ago) <Simon C Blyth>
    * 4a07bea - start dot backup/recover machinery (3 days ago) <Simon C Blyth>
    delta:bin blyth$ git show 4a07bea:bin/dot.py 



Git And Filemodes
--------------------

* https://stackoverflow.com/questions/4832346/how-to-use-group-file-permissions-correctly-on-a-git-repository

::

    git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)



Git just seems to distinguish executable or not, other modes not preserved::

    delta:test blyth$ git ls-files --stage
    100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0   a.txt
    100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0   b.txt
    100755 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0   c.txt
    100755 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0   d.txt
    delta:test blyth$ l *.txt
    -rwxrwxrwx  1 blyth  wheel  0 Mar 15 13:24 d.txt
    -rwxr-xr-x  1 blyth  wheel  0 Mar 15 13:23 c.txt
    -rw-------  1 blyth  wheel  0 Mar 15 13:22 b.txt
    -rw-r--r--  1 blyth  wheel  0 Mar 15 13:21 a.txt
    delta:test blyth$ 


* https://git-scm.com/docs/git-archive
* https://git-scm.com/docs/git-archive#ATTRIBUTES

* https://github.com/dr4Ke/git-preserve-permissions/blob/master/git-preserve-permissions

  overcomplicated perl approach  


Git and deployment
--------------------


* https://github.com/git-deploy/git-deploy

  over the top approach

* http://gitolite.com/deploy.html

  run down of different approaches


git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* https://feeding.cloud.geek.nz/posts/excluding-files-from-git-archive/

* https://github.com/git/git/blob/master/builtin/archive.c



extending git with custom commands
--------------------------------------

* https://www.atlassian.com/blog/git/extending-git

::

    delta:home blyth$ git demo one two three
    ['/Users/blyth/env/bin/git-demo', 'one', 'two', 'three']

    delta:home blyth$ cat ~/env/bin/git-demo 
    #!/usr/bin/env python
    import sys
    print sys.argv




Log Alias
------------

* https://coderwall.com/p/euwpig/a-better-git-log

::

    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

    git config --global alias.lga "log --graph --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit"


::

    git lg 
    git lg -p



Remove Old history from git repo ?
-------------------------------------

Via replace
~~~~~~~~~~~~~

* https://git-scm.com/book/en/v2/Git-Tools-Replace

Via graft
~~~~~~~~~~~

* https://stackoverflow.com/questions/4515580/how-do-i-remove-the-old-history-from-a-git-repository

* https://git.wiki.kernel.org/index.php/GraftPoint

.git/info/grafts has two sha1 separated by space and terminated by newline.

from `git help branch-rewrite`::

    NOTE: This command honors .git/info/grafts file and refs in the refs/replace/
    namespace. If you have any grafts or replacement refs defined, running this
    command will make them permanent.
     


Git Basics
-----------

* https://git-scm.com/book/en/v2/Getting-Started-Git-Basics

SVN, Hg are delta-based version control.
Git conceptually is snapshot-based (not delta).


`git status -s/--short`
~~~~~~~~~~~~~~~~~~~~~~~~~~

Two column output 

- left column indicates status of staging area 
- right column indicates status of working tree


`git diff`
~~~~~~~~~~~~

Compare working tree with staging area (aka index).


`git diff --staged/--cached`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compare staging area with last commit.
 



Working with multiple remotes
------------------------------

* https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
* https://git-scm.com/book/id/v2/Git-Branching-Remote-Branches

git pull
~~~~~~~~~~

If your current branch is set up to track a remote branch (see the next section
and Git Branching for more information), you can use the git pull command to
automatically fetch and then merge that remote branch into your current branch.


`git push -u/--set-upstream`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For every branch that is up to date or successfully pushed, add upstream
(tracking) reference, used by argument-less git-pull(1) and other commands. For
more information, see branch.<name>.merge in git-config(1).

Note only one remote can be the default upstream, for that one 
the argument-less::

    git push -v   
    git pull -v

is equivalent to::

    git push g4pb master -v
    git pull g4pb master -v

For other remotes need to use full form, eg::

    git push arc master -v     
    git pull arc master -v


`git show-branch *master`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

https://git-scm.com/book/id/v2/Git-Branching-Remote-Branches

::

    delta:home blyth$ git show-branch *master
    * [master] in all bash functions switch the informational workflow-home to home-home
     ! [refs/remotes/arc/master] in all bash functions switch the informational workflow-home to home-home
      ! [refs/remotes/g4pb/master] in all bash functions switch the informational workflow-home to home-home
    ---
    *++ [master] in all bash functions switch the informational workflow-home to home-home
    delta:home blyth$ 
        

`git rev-parse master g4pb/master arc/master`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    delta:home blyth$ git rev-parse master g4pb/master arc/master 
    5f5247608802bebd17a7952167d3cbd24a6912bd
    5f5247608802bebd17a7952167d3cbd24a6912bd
    5f5247608802bebd17a7952167d3cbd24a6912bd



Take a look at Sphinx tags/1.2, then return to latest, see sphinx-
---------------------------------------------------------------------------

::

    delta:sphinx blyth$ git checkout tags/1.2
    Note: checking out 'tags/1.2'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by performing another checkout.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -b with the checkout command again. Example:

      git checkout -b new_branch_name

    HEAD is now at 2a86eff... Changelog bump.
    delta:sphinx blyth$ 

    delta:sphinx blyth$ git status
    HEAD detached at 1.2
    nothing to commit, working directory clean

    delta:sphinx blyth$ git checkout master
    Previous HEAD position was 2a86eff... Changelog bump.
    Switched to branch 'master'
    Your branch is up-to-date with 'origin/master'.

    delta:sphinx blyth$ git status
    On branch master
    Your branch is up-to-date with 'origin/master'.

    nothing to commit, working directory clean



Github Merging a pull request via web interface
--------------------------------------------------

* click on title of the pull request (not the selection button)
* use the dropdown to right to pick the type of merge then click the button to left
* add commit message and confirm the merge


Status
--------

::

    # porcelain: line-by-line format for scripts , branch: show the branch and tracking info
    delta:assimp-fork blyth$ git status --porcelain --branch   
    ## master...origin/master
     M Readme.md
    ?? hello.txt


Config
--------

::

    delta:~ blyth$ git config --list
    user.name=Simon C Blyth
    user.email=simon.c.blyth@gmail.com
    color.diff=auto
    color.status=auto
    color.branch=auto
    core.repositoryformatversion=0
    core.filemode=true
    core.bare=false
    core.logallrefupdates=true
    core.ignorecase=true
    core.precomposeunicode=true
    remote.origin.url=git@bitbucket.org:simoncblyth/testhome.git
    remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
    branch.master.remote=origin
    branch.master.merge=refs/heads/master
    delta:~ blyth$ 

    delta:hometest blyth$ git config --list
    user.name=Simon C Blyth
    user.email=simon.c.blyth@gmail.com
    color.diff=auto
    color.status=auto
    color.branch=auto
    core.repositoryformatversion=0
    core.filemode=true
    core.bare=false
    core.logallrefupdates=true
    core.ignorecase=true
    core.precomposeunicode=true
    push.default=simple
    remote.origin.url=gcrypt::blyth@192.168.0.200:testhomecrypt.git
    remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
    remote.origin.gcrypt-id=:id:poByIm5T1tjn3sXlDiVg
    delta:hometest blyth$ 





Git Remote Helpers
--------------------

* https://git-scm.com/docs/git-remote-helpers

Remote helper programs are normally not used directly by end users, but they
are invoked by git when it needs to interact with remote repositories git does
not support natively. A given helper will implement a subset of the
capabilities documented here. When git needs to interact with a repository
using a remote helper, it spawns the helper as an independent process, sends
commands to the helper’s standard input, and expects results from the helper’s
standard output. Because a remote helper runs as an independent process from
git, there is no need to re-link git to add a new helper, nor any need to link
the helper with the implementation of git.

When git encounters a URL of the form <transport>://<address>, where
<transport> is a protocol that it cannot handle natively, it automatically
invokes git remote-<transport> with the full URL as the second argument.


Encrypted Git Repo ?
---------------------

* see w-/gcrypt-


git remote show
----------------

::

    delta:~ blyth$ git remote -v show
    origin  git@bitbucket.org:simoncblyth/testhome.git (fetch)
    origin  git@bitbucket.org:simoncblyth/testhome.git (push)


Avoid http blockages by cloning over SSH 
-------------------------------------------

* Sometimes can avoid "http" blockage by using "https" to use a different port 


* https://stackoverflow.com/questions/6167905/git-clone-through-ssh

Git URL in one of two forms:

ssh://username@host.xz/absolute/path/to/repo.git/ 
    just a forward slash for absolute path on server

username@host.xz:relative/path/to/repo.git/ 
    just a colon (it mustn't have the ssh:// for relative path on server (relative to home dir of username on server machine)


Note this did not work with shallow (--depth 1) clones, possibly as git version
on one of the machines is too old.
 

clone into home on unblocked machine 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
::

    simon:~ blyth$ git clone http://git.videolan.org/git/x264
    Cloning into 'x264'...
    remote: Counting objects: 20569, done.
    remote: Compressing objects: 100% (4266/4266), done.
    remote: Total 20569 (delta 17005), reused 19712 (delta 16260)
    Receiving objects: 100% (20569/20569), 4.83 MiB | 76.00 KiB/s, done.
    Resolving deltas: 100% (17005/17005), done.
    Checking connectivity... done.
    simon:~ blyth$ 


clone over ssh from http blocked machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    [simon@localhost x264]$ git clone blyth@simon.phys.ntu.edu.tw:x264
    Initialized empty Git repository in /usr/local/env/video/x264/x264/.git/
    Password:
    remote: Counting objects: 20569, done.
    remote: Compressing objects: 100% (3521/3521), done.
    remote: Total 20569 (delta 17005), reused 20569 (delta 17005)
    Receiving objects: 100% (20569/20569), 4.83 MiB | 547 KiB/s, done.
    Resolving deltas: 100% (17005/17005), done.
    [simon@localhost x264]$ 


git remote add
---------------

* https://caolan.org/posts/encrypted_git_repositories.html

::

    git remote add origin gcrypt::rsync://username@your-server.com:example-crypt
    git remote add origin gcrypt::rsync://username@your-server.com:example-crypt


git push : setting push.default
-----------------------------------

::

    delta:hometest blyth$ git push 
    warning: push.default is unset; its implicit value is changing in
    Git 2.0 from 'matching' to 'simple'. To squelch this message
    and maintain the current behavior after the default changes, use:

      git config --global push.default matching

    To squelch this message and adopt the new behavior now, use:

      git config --global push.default simple

    When push.default is set to 'matching', git will push local branches
    to the remote branches that already exist with the same name.

    In Git 2.0, Git will default to the more conservative 'simple'
    behavior, which only pushes the current branch to the corresponding
    remote branch that 'git pull' uses to update the current branch.

    See 'git help config' and search for 'push.default' for further information.
    (the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
    'current' instead of 'simple' if you sometimes use older versions of Git)

    blyth@192.168.0.200's password: 
    Everything up-to-date

::

    delta:hometest blyth$ git config push.default simple
    delta:hometest blyth$ git push 
    blyth@192.168.0.200's password: 
    Everything up-to-date

After adding key to .ssh/authorized_keys2 on server, and starting ssh agent : works without password::

    delta:hometest blyth$ git push 
    Everything up-to-date



git pull
-----------

* combined fetch and merge


Git-hg-rosetta-stone
--------------------------

* https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone

Main difference is the git *index*, a staging area for preparing commits


================================  =======================================  ===========================================
hg                                 git
================================  =======================================  ===========================================
hg revert some_file                git checkout some_file
--------------------------------  ---------------------------------------  -------------------------------------------
                                   git help checkout                        updates the named paths in the working tree from the index file or from a
                                                                            named <tree-ish> (most often a commit)  
--------------------------------  ---------------------------------------  -------------------------------------------
hg backout                         git revert
--------------------------------  ---------------------------------------  -------------------------------------------
hg add                             git add                                  git adds to index
================================  =======================================  ===========================================



Whats all this ?
-----------------

::

    simon:boost-python-examples blyth$ git add 04-ClassMembers/member.py
    simon:boost-python-examples blyth$ git commit -m "avoid uninteresting error regards non-ascii encodings"
    [master 1abe2be] avoid uninteresting error regards non-ascii encodings
     1 file changed, 1 insertion(+), 1 deletion(-)

    simon:boost-python-examples blyth$ git push 
    warning: push.default is unset; its implicit value is changing in
    Git 2.0 from 'matching' to 'simple'. To squelch this message
    and maintain the current behavior after the default changes, use:

      git config --global push.default matching

    To squelch this message and adopt the new behavior now, use:

      git config --global push.default simple

    When push.default is set to 'matching', git will push local branches
    to the remote branches that already exist with the same name.

    In Git 2.0, Git will default to the more conservative 'simple'
    behavior, which only pushes the current branch to the corresponding
    remote branch that 'git pull' uses to update the current branch.

    See 'git help config' and search for 'push.default' for further information.
    (the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
    'current' instead of 'simple' if you sometimes use older versions of Git)

    Username for 'https://github.com': simoncblyth
    Password for 'https://simoncblyth@github.com': 
    Counting objects: 7, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (4/4), done.
    Writing objects: 100% (4/4), 376 bytes | 0 bytes/s, done.
    Total 4 (delta 3), reused 0 (delta 0)
    To https://github.com/simoncblyth/boost-python-examples
       90f6092..1abe2be  master -> master
    simon:boost-python-examples blyth$ 
    simon:boost-python-examples blyth$ 




Git workflow
---------------

Make mods

* "git status" 
* "git add" changed files
* "git commit -m  




Failed push, seems must now use https
---------------------------------------

::

    delta:DualContouringSample blyth$ git push 
    warning: push.default is unset; its implicit value is changing in
    Git 2.0 from 'matching' to 'simple'. To squelch this message
    and maintain the current behavior after the default changes, use:

      git config --global push.default matching

    To squelch this message and adopt the new behavior now, use:

      git config --global push.default simple

    When push.default is set to 'matching', git will push local branches
    to the remote branches that already exist with the same name.

    In Git 2.0, Git will default to the more conservative 'simple'
    behavior, which only pushes the current branch to the corresponding
    remote branch that 'git pull' uses to update the current branch.

    See 'git help config' and search for 'push.default' for further information.
    (the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
    'current' instead of 'simple' if you sometimes use older versions of Git)

    fatal: remote error: 
      You can't push to git://github.com/simoncblyth/DualContouringSample.git
      Use https://github.com/simoncblyth/DualContouringSample.git
    delta:DualContouringSample blyth$ 




Updating from remote branch
----------------------------

  git pull origin master    # 

Simple branching
------------------

* http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging

::

    git checkout -b py25compat    # shorthand for "git branch" "git checkout" of the named branch  


Sharing a git repo
---------------------

* http://www.git-scm.com/book/en/Git-on-the-Server-The-Protocols#The-HTTP/S-Protocol

Whats all this ?
----------------

delta:code blyth$ git push 
warning: push.default is unset; its implicit value is changing in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

In Git 2.0, Git will default to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Counting objects: 49, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 3.40 KiB | 0 bytes/s, done.
Total 8 (delta 7), reused 0 (delta 0)
To git@github.com:simoncblyth/assimp.git
   845e88a..1ff18aa  master -> master
delta:code blyth$ 




FUNCTIONS
----------

*git-bare*
       when invoked from the root of git working copy this
       creates a bare repo in *git-bare-dir* eg /var/scm/git 

*git-bare-scp name tag* 
       scp the bare git repo to remote node  


EOU
}
git-dir(){ echo $(local-scm-fold)/git ; }
git-cd(){  cd $(git-dir); }
git-mate(){ mate $(git-dir) ; }
git-make(){
   local dir=$(git-dir) &&  mkdir -p $dir 
}

git-bare-dir(){ echo $(git-dir) ; }
git-bare-path(){ echo $(git-bare-dir)/${1:-dummy}.git ; }
git-bare-name(){ echo ${GIT_BARE_NAME:-pycollada} ;}

git-bare(){
  local msg="=== $FUNCNAME :"
  echo $msg following recipe from http://www.git-scm.com/book/en/Git-on-the-Server-The-Protocols#The-HTTP/S-Protocol
  local path=$PWD
  [ ! -d "${path}/.git" ] && echo $msg needs to be invoked from toplevel of git checkout containing .git folder   && return 1
  local name=$(basename $path)
  local bare=$(git-bare-path $name)
  local hook=$bare/hooks/post-update
  [ -d "$bare" ] && echo $msg bare repo exists already at $bare && return 1
  local cmd="git clone --bare $path $bare ; mv $hook.sample $hook ; chmod a+x $hook  "
  echo $msg $cmd
  eval $cmd
}

git-bare-scp(){
  local msg="=== $FUNCNAME :"
  local name=${1:-$(git-bare-name)}
  local tag=${2:-N}
  [ "$NODE_TAG" == "$tag" ] && echo $msg cannot scp to self $tag && return 1 
  local cmd="scp -r $(git-bare-path $name) $tag:$(NODE_TAG=$tag git-bare-dir)"
  echo $msg $cmd
  eval $cmd
}

git-bare-clone(){
  local msg="=== $FUNCNAME :"
  local name=${1:-$(git-bare-name)}
  local bare=$(git-bare-path $name)
  [ ! -d "$bare" ] && echo $msg no bare git repo at $bare && return 1
  local cmd="git clone $bare"
  echo $msg $cmd
  eval $cmd 
}


git-origin(){
   git remote show origin
}


git-conf(){

git config --global user.name "Simon C Blyth"
git config --global user.email "simon.c.blyth@gmail.com"
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
#git config --global core.editor "mate -w"

git config -l

}

git-learning(){

  local dir=/tmp/env/$FUNCNAME && mkdir -p $dir
  cd $dir


  git clone git://github.com/dcramer/django-compositepks.git
  git clone git://github.com/django/django.git


}


git-global-ignores-(){ cat << EOI
# $FUNCNAME
.DS_Store
*.swp
*.pyc
EOI
}

git-global-ignores(){
   local path=$HOME/.config/git/ignore 

   [ -f $path ] && echo $msg path $path exists already && return 

   local dir=$(dirname $path)
   mkdir -p $dir 

   $FUNCNAME- 
   echo $msg writing above to path $path : see man gitignore   

   $FUNCNAME- > $path
}




